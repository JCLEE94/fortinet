apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Chart.Name }}
    version: {{ .Chart.AppVersion }}
    component: microservice
    managed-by: argocd
    infrastructure: jclee.me
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      version: {{ .Chart.AppVersion }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        version: {{ .Chart.AppVersion }}
        component: microservice
      annotations:
        prometheus.io/scrape: "{{ .Values.monitoring.enabled }}"
        prometheus.io/path: "/api/health"
        prometheus.io/port: "7777"
    spec:
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          capabilities:
            {{- toYaml .Values.securityContext.capabilities | nindent 12 }}
          {{- if .Values.securityContext.seccompProfile }}
          seccompProfile:
            {{- toYaml .Values.securityContext.seccompProfile | nindent 12 }}
          {{- end }}
        ports:
        - containerPort: 7777
          name: http
          protocol: TCP
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.fortinet.apiKeys.fortigate }}
        - name: FORTIGATE_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secrets
              key: fortigate-api-key
        {{- end }}
        {{- if .Values.fortinet.apiKeys.fortimanager }}
        - name: FORTIMANAGER_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secrets
              key: fortimanager-api-key
        {{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probes.liveness.path }}
            port: {{ .Values.probes.liveness.port }}
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probes.readiness.path }}
            port: {{ .Values.probes.readiness.port }}
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
      volumes:
      - name: data-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}