#!/bin/bash
# monitor-deployment.sh - Î∞∞Ìè¨ Î™®ÎãàÌÑ∞ÎßÅ Ïä§ÌÅ¨Î¶ΩÌä∏

set -euo pipefail

# ÏÉâÍπî Ï∂úÎ†•
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_monitor() {
    echo -e "${CYAN}[MONITOR]${NC} $1"
}

# ÏÑ§Ï†ï
GITHUB_REPO="JCLEE94/fortinet"
ARGOCD_SERVER="argo.jclee.me"
CHECK_INTERVAL=30
MAX_WAIT_TIME=1800  # 30Î∂Ñ

# ÌôòÍ≤ΩÎ≥Ñ ÏÑ§Ï†ï
declare -A ENV_APPS=(
    ["production"]="fortinet"
    ["staging"]="fortinet-staging"
    ["development"]="fortinet-development"
)

declare -A ENV_URLS=(
    ["production"]="https://fortinet.jclee.me"
    ["staging"]="https://fortinet-staging.jclee.me"
    ["development"]="https://fortinet-development.jclee.me"
)

declare -A ENV_NODEPORTS=(
    ["production"]="30777"
    ["staging"]="30779"
    ["development"]="30778"
)

# ÏÇ¨Ïö©Î≤ï ÌëúÏãú
show_usage() {
    cat <<EOF
Usage: $0 [OPTIONS] [MODE]

Î∞∞Ìè¨ Î™®ÎãàÌÑ∞ÎßÅ Ïä§ÌÅ¨Î¶ΩÌä∏ - CI/CD ÌååÏù¥ÌîÑÎùºÏù∏ Î∞è ArgoCD Î∞∞Ìè¨ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ

MODES:
    github          GitHub Actions ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ (Í∏∞Î≥∏Í∞í)
    argocd          ArgoCD Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
    health          Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ìó¨Ïä§ Ï≤¥ÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ
    all             Î™®Îì† Î™®Îìú ÌÜµÌï© Î™®ÎãàÌÑ∞ÎßÅ

OPTIONS:
    -h, --help      Ïù¥ ÎèÑÏõÄÎßê ÌëúÏãú
    -i, --interval  Ï≤¥ÌÅ¨ Í∞ÑÍ≤© (Ï¥à, Í∏∞Î≥∏Í∞í: 30)
    -t, --timeout   ÏµúÎåÄ ÎåÄÍ∏∞ ÏãúÍ∞Ñ (Ï¥à, Í∏∞Î≥∏Í∞í: 1800)
    -w, --workflow  ÌäπÏ†ï ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î™®ÎãàÌÑ∞ÎßÅ (ci-parallel, deploy-manual)
    -e, --env       ÌäπÏ†ï ÌôòÍ≤Ω Î™®ÎãàÌÑ∞ÎßÅ (production, staging, development)
    --once          Ìïú Î≤àÎßå Ï≤¥ÌÅ¨ÌïòÍ≥† Ï¢ÖÎ£å
    --follow        Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏ ÌåîÎ°úÏö∞ Î™®Îìú

ÏòàÏ†ú:
    $0                              # GitHub Actions Î™®ÎãàÌÑ∞ÎßÅ
    $0 argocd                       # ArgoCD ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ
    $0 all --interval 60            # Î™®Îì† ÏÉÅÌÉúÎ•º 60Ï¥à Í∞ÑÍ≤©ÏúºÎ°ú Î™®ÎãàÌÑ∞ÎßÅ
    $0 github --workflow ci-parallel # ÌäπÏ†ï ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î™®ÎãàÌÑ∞ÎßÅ
    $0 health --env production      # ÌîÑÎ°úÎçïÏÖò Ìó¨Ïä§ Ï≤¥ÌÅ¨Îßå Î™®ÎãàÌÑ∞ÎßÅ
    $0 --once                       # ÌòÑÏû¨ ÏÉÅÌÉúÎßå Ìïú Î≤à Ï≤¥ÌÅ¨
EOF
}

# GitHub CLI ÏÑ§Ïπò ÌôïÏù∏
check_github_cli() {
    if ! command -v gh &> /dev/null; then
        log_error "GitHub CLI not found. Please install gh CLI first."
        log_info "Install: curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg"
        return 1
    fi
    
    # GitHub Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
    if ! gh auth status >/dev/null 2>&1; then
        log_error "Not authenticated with GitHub. Run: gh auth login"
        return 1
    fi
    
    return 0
}

# ArgoCD CLI ÏÑ§Ïπò ÌôïÏù∏
check_argocd_cli() {
    if ! command -v argocd &> /dev/null; then
        log_warning "ArgoCD CLI not found. Installing..."
        curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /tmp/argocd
        sudo mv /tmp/argocd /usr/local/bin/argocd
        log_success "ArgoCD CLI installed"
    fi
    
    # ArgoCD Î°úÍ∑∏Ïù∏
    log_info "Logging in to ArgoCD..."
    if argocd login "$ARGOCD_SERVER" \
        --username admin \
        --password bingogo1 \
        --insecure \
        --grpc-web >/dev/null 2>&1; then
        log_success "ArgoCD login successful"
        return 0
    else
        log_error "ArgoCD login failed"
        return 1
    fi
}

# GitHub Actions ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î™®ÎãàÌÑ∞ÎßÅ
monitor_github_workflows() {
    local workflow_filter="$1"
    
    log_monitor "Monitoring GitHub Actions workflows..."
    
    while true; do
        echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') - GitHub Actions Status"
        echo "=================================="
        
        # ÏµúÍ∑º ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ïã§Ìñâ Ï°∞Ìöå
        if [ -n "$workflow_filter" ]; then
            gh run list --repo "$GITHUB_REPO" --workflow "$workflow_filter" --limit 5
        else
            gh run list --repo "$GITHUB_REPO" --limit 10
        fi
        
        # ÏßÑÌñâ Ï§ëÏù∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
        local running_runs=$(gh run list --repo "$GITHUB_REPO" --status "in_progress" --json id --jq '.[].id')
        
        if [ -n "$running_runs" ]; then
            echo -e "\nüîÑ Running Workflows:"
            for run_id in $running_runs; do
                echo "  Run ID: $run_id"
                gh run view "$run_id" --repo "$GITHUB_REPO" | head -20
            done
        else
            echo -e "\n‚úÖ No workflows currently running"
        fi
        
        if [ "$ONCE_MODE" = "true" ]; then
            break
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# ArgoCD Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Î™®ÎãàÌÑ∞ÎßÅ
monitor_argocd_applications() {
    local env_filter="$1"
    
    log_monitor "Monitoring ArgoCD applications..."
    
    while true; do
        echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') - ArgoCD Applications Status"
        echo "=================================="
        
        if [ -n "$env_filter" ]; then
            local app_name=${ENV_APPS[$env_filter]}
            if [ -n "$app_name" ]; then
                argocd app get "$app_name" --show-params
            else
                log_error "Invalid environment: $env_filter"
                return 1
            fi
        else
            # Î™®Îì† Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú
            argocd app list -o wide
            
            echo -e "\nüìä Application Details:"
            for env in "${!ENV_APPS[@]}"; do
                local app_name=${ENV_APPS[$env]}
                echo -e "\nüéØ $env ($app_name):"
                argocd app get "$app_name" --show-params 2>/dev/null | head -15 || echo "  ‚ùå Application not found"
            done
        fi
        
        if [ "$ONCE_MODE" = "true" ]; then
            break
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ìó¨Ïä§ Ï≤¥ÌÅ¨ Î™®ÎãàÌÑ∞ÎßÅ
monitor_health_checks() {
    local env_filter="$1"
    
    log_monitor "Monitoring application health checks..."
    
    while true; do
        echo -e "\n$(date +'%Y-%m-%d %H:%M:%S') - Health Check Status"
        echo "=================================="
        
        if [ -n "$env_filter" ]; then
            check_single_environment_health "$env_filter"
        else
            # Î™®Îì† ÌôòÍ≤Ω Ìó¨Ïä§ Ï≤¥ÌÅ¨
            for env in "${!ENV_URLS[@]}"; do
                check_single_environment_health "$env"
            done
        fi
        
        if [ "$ONCE_MODE" = "true" ]; then
            break
        fi
        
        sleep "$CHECK_INTERVAL"
    done
}

# Îã®Ïùº ÌôòÍ≤Ω Ìó¨Ïä§ Ï≤¥ÌÅ¨
check_single_environment_health() {
    local env="$1"
    local url="${ENV_URLS[$env]}"
    local nodeport="${ENV_NODEPORTS[$env]}"
    local fallback_url="http://192.168.50.110:$nodeport"
    
    echo -e "\nüåç $env Environment:"
    
    # Primary URL Ï≤¥ÌÅ¨
    if curl -s --max-time 10 "$url/api/health" >/dev/null 2>&1; then
        local response=$(curl -s --max-time 10 "$url/api/health")
        if echo "$response" | grep -q "healthy"; then
            log_success "  Primary URL: $url ‚úÖ"
        else
            log_warning "  Primary URL: $url ‚ö†Ô∏è (Response: $response)"
        fi
    else
        log_error "  Primary URL: $url ‚ùå"
        
        # Fallback URL Ï≤¥ÌÅ¨
        if curl -s --max-time 10 "$fallback_url/api/health" >/dev/null 2>&1; then
            local fallback_response=$(curl -s --max-time 10 "$fallback_url/api/health")
            if echo "$fallback_response" | grep -q "healthy"; then
                log_success "  Fallback URL: $fallback_url ‚úÖ"
            else
                log_warning "  Fallback URL: $fallback_url ‚ö†Ô∏è"
            fi
        else
            log_error "  Fallback URL: $fallback_url ‚ùå"
        fi
    fi
    
    # Kubernetes Pod ÏÉÅÌÉú ÌôïÏù∏
    local namespace=""
    case "$env" in
        "production") namespace="fortinet" ;;
        "staging") namespace="fortinet-staging" ;;
        "development") namespace="fortinet-dev" ;;
    esac
    
    if [ -n "$namespace" ]; then
        local pods=$(kubectl get pods -n "$namespace" -l app=fortinet --no-headers 2>/dev/null || echo "")
        if [ -n "$pods" ]; then
            local ready_pods=$(echo "$pods" | awk '{print $2}' | grep -c "1/1" || echo "0")
            local total_pods=$(echo "$pods" | wc -l)
            echo "  Pods: $ready_pods/$total_pods ready"
        else
            echo "  Pods: No pods found in namespace $namespace"
        fi
    fi
}

# ÌÜµÌï© Î™®ÎãàÌÑ∞ÎßÅ
monitor_all() {
    local env_filter="$1"
    local workflow_filter="$2"
    
    log_monitor "Starting comprehensive monitoring..."
    
    while true; do
        clear
        echo "üöÄ FortiGate Nextrade - Deployment Monitoring Dashboard"
        echo "========================================================"
        echo "Time: $(date +'%Y-%m-%d %H:%M:%S')"
        echo "Refresh Interval: ${CHECK_INTERVAL}s"
        echo ""
        
        # GitHub Actions ÏÉÅÌÉú
        echo "üîÑ GitHub Actions Status:"
        echo "-------------------------"
        if [ -n "$workflow_filter" ]; then
            gh run list --repo "$GITHUB_REPO" --workflow "$workflow_filter" --limit 3 2>/dev/null || echo "No workflows found"
        else
            gh run list --repo "$GITHUB_REPO" --limit 5 2>/dev/null || echo "Cannot access GitHub API"
        fi
        
        # ArgoCD Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú
        echo -e "\nüì± ArgoCD Applications:"
        echo "----------------------"
        if command -v argocd &> /dev/null; then
            argocd app list -o wide 2>/dev/null || echo "Cannot connect to ArgoCD"
        else
            echo "ArgoCD CLI not available"
        fi
        
        # Ìó¨Ïä§ Ï≤¥ÌÅ¨ ÏÉÅÌÉú
        echo -e "\nüè• Health Check Status:"
        echo "----------------------"
        if [ -n "$env_filter" ]; then
            check_single_environment_health "$env_filter"
        else
            for env in production staging development; do
                if [[ " ${!ENV_URLS[@]} " =~ " $env " ]]; then
                    check_single_environment_health "$env"
                fi
            done
        fi
        
        # ÏãúÏä§ÌÖú Î¶¨ÏÜåÏä§ (Kubernetes)
        echo -e "\nüíæ System Resources:"
        echo "-------------------"
        if command -v kubectl &> /dev/null; then
            echo "Nodes:"
            kubectl get nodes --no-headers 2>/dev/null | awk '{print "  "$1": "$2}' || echo "  Cannot access cluster"
            echo ""
            echo "Namespaces:"
            kubectl get ns -l managed-by=fortinet-cicd --no-headers 2>/dev/null | awk '{print "  "$1": "$2}' || echo "  No managed namespaces found"
        else
            echo "kubectl not available"
        fi
        
        if [ "$ONCE_MODE" = "true" ]; then
            break
        fi
        
        echo -e "\n‚è±Ô∏è  Next refresh in ${CHECK_INTERVAL} seconds... (Press Ctrl+C to stop)"
        sleep "$CHECK_INTERVAL"
    done
}

# Ïã§ÏãúÍ∞Ñ Î°úÍ∑∏ ÌåîÎ°úÏö∞
follow_logs() {
    local env_filter="$1"
    
    log_monitor "Following real-time logs..."
    
    if [ -n "$env_filter" ]; then
        local namespace=""
        case "$env_filter" in
            "production") namespace="fortinet" ;;
            "staging") namespace="fortinet-staging" ;;
            "development") namespace="fortinet-dev" ;;
        esac
        
        if [ -n "$namespace" ]; then
            log_info "Following logs for $env_filter environment ($namespace namespace)"
            kubectl logs -n "$namespace" -l app=fortinet -f --tail=100
        else
            log_error "Invalid environment: $env_filter"
            return 1
        fi
    else
        log_info "Following logs for all environments..."
        # Ïó¨Îü¨ ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Î°úÍ∑∏Î•º ÎèôÏãúÏóê ÌåîÎ°úÏö∞ (Î∞±Í∑∏ÎùºÏö¥Îìú)
        for env in "${!ENV_APPS[@]}"; do
            local namespace=""
            case "$env" in
                "production") namespace="fortinet" ;;
                "staging") namespace="fortinet-staging" ;;  
                "development") namespace="fortinet-dev" ;;
            esac
            
            if [ -n "$namespace" ]; then
                kubectl logs -n "$namespace" -l app=fortinet -f --tail=10 --prefix=true &
            fi
        done
        
        # Î™®Îì† Î∞±Í∑∏ÎùºÏö¥Îìú ÌîÑÎ°úÏÑ∏Ïä§ ÎåÄÍ∏∞
        wait
    fi
}

# Î©îÏù∏ Ìï®Ïàò
main() {
    # Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
    local MODE="github"
    local ENV_FILTER=""
    local WORKFLOW_FILTER=""
    ONCE_MODE=false
    FOLLOW_MODE=false
    
    # Ïù∏Ïàò ÌååÏã±
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -i|--interval)
                CHECK_INTERVAL="$2"
                shift 2
                ;;
            -t|--timeout)
                MAX_WAIT_TIME="$2"
                shift 2
                ;;
            -w|--workflow)
                WORKFLOW_FILTER="$2"
                shift 2
                ;;
            -e|--env)
                ENV_FILTER="$2"
                shift 2
                ;;
            --once)
                ONCE_MODE=true
                shift
                ;;
            --follow)
                FOLLOW_MODE=true
                shift
                ;;
            github|argocd|health|all)
                MODE="$1"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    log_info "üöÄ FortiGate Nextrade Deployment Monitor"
    log_info "Mode: $MODE"
    log_info "Check Interval: ${CHECK_INTERVAL}s"
    if [ -n "$ENV_FILTER" ]; then
        log_info "Environment Filter: $ENV_FILTER"
    fi
    if [ -n "$WORKFLOW_FILTER" ]; then
        log_info "Workflow Filter: $WORKFLOW_FILTER"
    fi
    if [ "$ONCE_MODE" = "true" ]; then
        log_info "Single check mode enabled"
    fi
    if [ "$FOLLOW_MODE" = "true" ]; then
        log_info "Follow logs mode enabled"
    fi
    echo ""
    
    # ÌåîÎ°úÏö∞ Î™®Îìú
    if [ "$FOLLOW_MODE" = "true" ]; then
        follow_logs "$ENV_FILTER"
        exit 0
    fi
    
    # ÌïÑÏàò ÎèÑÍµ¨ ÌôïÏù∏ Î∞è ÏÑ§Ïπò
    case "$MODE" in
        "github"|"all")
            check_github_cli || exit 1
            ;;
    esac
    
    case "$MODE" in
        "argocd"|"all")
            check_argocd_cli || exit 1
            ;;
    esac
    
    # Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë
    case "$MODE" in
        "github")
            monitor_github_workflows "$WORKFLOW_FILTER"
            ;;
        "argocd")
            monitor_argocd_applications "$ENV_FILTER"
            ;;
        "health")
            monitor_health_checks "$ENV_FILTER"
            ;;
        "all")
            monitor_all "$ENV_FILTER" "$WORKFLOW_FILTER"
            ;;
        *)
            log_error "Invalid mode: $MODE"
            show_usage
            exit 1
            ;;
    esac
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi