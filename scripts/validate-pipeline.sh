#!/bin/bash
# validate-pipeline.sh - CI/CD ÌååÏù¥ÌîÑÎùºÏù∏ Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏

set -euo pipefail

# ÏÉâÍπî Ï∂úÎ†•
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_check() {
    echo -e "${CYAN}[CHECK]${NC} $1"
}

# Ï†ÑÏó≠ Î≥ÄÏàò
ERRORS=()
WARNINGS=()
SUCCESS_COUNT=0
TOTAL_CHECKS=0

# Ï≤¥ÌÅ¨ Ìï®Ïàò wrapper
run_check() {
    local check_name="$1"
    local check_function="$2"
    
    ((TOTAL_CHECKS++))
    log_check "Running: $check_name"
    
    if $check_function; then
        log_success "$check_name"
        ((SUCCESS_COUNT++))
        return 0
    else
        log_error "$check_name"
        ERRORS+=("$check_name")
        return 1
    fi
}

# 1. GitHub Actions ÏõåÌÅ¨ÌîåÎ°úÏö∞ Í≤ÄÏ¶ù
check_github_workflows() {
    local workflow_dir=".github/workflows"
    local required_workflows=("ci-parallel.yml" "deploy-manual.yml" "offline-tar.yml")
    local missing_workflows=()
    
    if [ ! -d "$workflow_dir" ]; then
        echo "GitHub workflows directory not found"
        return 1
    fi
    
    for workflow in "${required_workflows[@]}"; do
        if [ ! -f "$workflow_dir/$workflow" ]; then
            missing_workflows+=("$workflow")
        fi
    done
    
    if [ ${#missing_workflows[@]} -gt 0 ]; then
        echo "Missing workflows: ${missing_workflows[*]}"
        return 1
    fi
    
    # ÏõåÌÅ¨ÌîåÎ°úÏö∞ Î¨∏Î≤ï Í≤ÄÏ¶ù (Í∏∞Î≥∏Ï†ÅÏù∏ YAML Í≤ÄÏ¶ù)
    for workflow in "${required_workflows[@]}"; do
        if ! python3 -c "import yaml; yaml.safe_load(open('$workflow_dir/$workflow'))" 2>/dev/null; then
            echo "Invalid YAML syntax in $workflow"
            return 1
        fi
    done
    
    return 0
}

# 2. Docker ÌôòÍ≤Ω Í≤ÄÏ¶ù
check_docker_environment() {
    if ! docker --version >/dev/null 2>&1; then
        echo "Docker not installed or not accessible"
        return 1
    fi
    
    if ! docker buildx version >/dev/null 2>&1; then
        echo "Docker Buildx not available"
        return 1
    fi
    
    # Registry Ï†ëÍ∑º ÌÖåÏä§Ìä∏
    if ! docker login registry.jclee.me -u admin -p bingogo1 >/dev/null 2>&1; then
        echo "Cannot login to Docker registry"
        return 1
    fi
    
    return 0
}

# 3. Kubernetes ÌÅ¥Îü¨Ïä§ÌÑ∞ Ïó∞Í≤∞ Í≤ÄÏ¶ù
check_kubernetes_access() {
    if ! kubectl version --client >/dev/null 2>&1; then
        echo "kubectl not installed or not accessible"
        return 1
    fi
    
    if ! kubectl cluster-info >/dev/null 2>&1; then
        echo "Cannot connect to Kubernetes cluster"
        return 1
    fi
    
    # ÌïÑÏöîÌïú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÌôïÏù∏
    local namespaces=("argocd" "fortinet" "fortinet-staging" "fortinet-dev")
    for ns in "${namespaces[@]}"; do
        if ! kubectl get namespace "$ns" >/dev/null 2>&1; then
            echo "Namespace $ns not found"
            WARNINGS+=("Namespace $ns not found - will be created during deployment")
        fi
    done
    
    return 0
}

# 4. ArgoCD Ï†ëÍ∑º Í≤ÄÏ¶ù
check_argocd_access() {
    if ! command -v argocd &> /dev/null; then
        echo "ArgoCD CLI not installed"
        return 1
    fi
    
    if ! argocd login argo.jclee.me --username admin --password bingogo1 --insecure --grpc-web >/dev/null 2>&1; then
        echo "Cannot login to ArgoCD"
        return 1
    fi
    
    # ArgoCD Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÌôïÏù∏
    local apps=("fortinet")
    for app in "${apps[@]}"; do
        if ! argocd app get "$app" >/dev/null 2>&1; then
            echo "ArgoCD application $app not found"
            WARNINGS+=("ArgoCD application $app not found - will be created during deployment")
        fi
    done
    
    return 0
}

# 5. Registry Î∞è ChartMuseum Ï†ëÍ∑º Í≤ÄÏ¶ù
check_registries() {
    # Docker Registry ÌÖåÏä§Ìä∏
    if ! curl -u admin:bingogo1 -s https://registry.jclee.me/v2/_catalog >/dev/null; then
        echo "Cannot access Docker registry API"
        return 1
    fi
    
    # ChartMuseum ÌÖåÏä§Ìä∏
    if ! curl -u admin:bingogo1 -s https://charts.jclee.me/api/charts >/dev/null; then
        echo "Cannot access ChartMuseum API"
        return 1
    fi
    
    return 0
}

# 6. Helm ÌôòÍ≤Ω Í≤ÄÏ¶ù
check_helm_environment() {
    if ! helm version >/dev/null 2>&1; then
        echo "Helm not installed or not accessible"
        return 1
    fi
    
    # Helm Chart ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
    if [ ! -d "helm/fortinet" ]; then
        echo "Helm chart directory not found"
        return 1
    fi
    
    # Chart Î¨∏Î≤ï Í≤ÄÏ¶ù
    if ! helm lint helm/fortinet >/dev/null 2>&1; then
        echo "Helm chart has syntax errors"
        return 1
    fi
    
    # ChartMuseum Ï†ÄÏû•ÏÜå Ï∂îÍ∞Ä
    if ! helm repo add chartmuseum https://charts.jclee.me --username admin --password bingogo1 >/dev/null 2>&1; then
        echo "Cannot add ChartMuseum repository to Helm"
        return 1
    fi
    
    return 0
}

# 7. Python ÌôòÍ≤Ω Î∞è ÌÖåÏä§Ìä∏ Í≤ÄÏ¶ù
check_python_environment() {
    if ! python3 --version | grep -q "3.11" >/dev/null 2>&1; then
        echo "Python 3.11 not found"
        return 1
    fi
    
    # ÌïÑÏàò Ìå®ÌÇ§ÏßÄ ÌôïÏù∏
    local packages=("pytest" "pytest-cov" "black" "flake8" "mypy")
    for package in "${packages[@]}"; do
        if ! python3 -c "import $package" >/dev/null 2>&1; then
            echo "Python package $package not installed"
            WARNINGS+=("Python package $package not installed - will be installed during CI")
        fi
    done
    
    # ÌÖåÏä§Ìä∏ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏
    if [ ! -d "tests" ]; then
        echo "Tests directory not found"
        WARNINGS+=("Tests directory not found - basic test will be created during CI")
    fi
    
    return 0
}

# 8. ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Í≤ÄÏ¶ù
check_project_structure() {
    local required_files=(
        "src/main.py"
        "src/web_app.py"
        "Dockerfile.production"
        "helm/fortinet/Chart.yaml"
        "k8s/manifests/deployment.yaml"
        "argocd/fortinet-app.yaml"
    )
    
    local missing_files=()
    for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
            missing_files+=("$file")
        fi
    done
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        echo "Missing required files: ${missing_files[*]}"
        return 1
    fi
    
    return 0
}

# 9. ÌôòÍ≤Ω Î≥ÄÏàò Î∞è ÏÑ§Ï†ï Í≤ÄÏ¶ù
check_environment_config() {
    # GitHub ActionsÏóêÏÑú ÌïÑÏöîÌïú ÌôòÍ≤Ω Î≥ÄÏàòÎì§Ïù¥ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏
    local github_secrets=(
        "Registry credentials should be set in GitHub repository secrets"
        "ChartMuseum credentials should be set in GitHub repository secrets"
    )
    
    # Î°úÏª¨ ÌôòÍ≤Ω ÏÑ§Ï†ï ÌôïÏù∏
    if [ ! -f "$HOME/.kube/config" ]; then
        echo "Kubernetes config not found"
        WARNINGS+=("Kubernetes config not found in ~/.kube/config")
    fi
    
    # Docker Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
    if ! docker info | grep -q "registry.jclee.me" 2>/dev/null; then
        echo "Not logged into Docker registry"
        WARNINGS+=("Docker registry login may be required")
    fi
    
    return 0
}

# 10. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ Í≤ÄÏ¶ù
check_network_connectivity() {
    local urls=(
        "https://k8s.jclee.me:443"
        "https://argo.jclee.me"
        "https://registry.jclee.me"
        "https://charts.jclee.me"
        "https://fortinet.jclee.me"
    )
    
    local failed_urls=()
    for url in "${urls[@]}"; do
        if ! curl -s --connect-timeout 5 "$url" >/dev/null 2>&1; then
            failed_urls+=("$url")
        fi
    done
    
    if [ ${#failed_urls[@]} -gt 0 ]; then
        echo "Cannot connect to: ${failed_urls[*]}"
        return 1
    fi
    
    return 0
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Í∂åÌïú Í≤ÄÏ¶ù
check_script_permissions() {
    local scripts=(
        "scripts/setup-multi-env.sh"
        "scripts/deploy-parallel.sh"
        "scripts/validate-pipeline.sh"
    )
    
    for script in "${scripts[@]}"; do
        if [ -f "$script" ] && [ ! -x "$script" ]; then
            echo "Script $script is not executable"
            return 1
        fi
    done
    
    return 0
}

# Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
generate_report() {
    echo ""
    echo "====================================="
    echo "üîç PIPELINE VALIDATION REPORT"
    echo "====================================="
    echo "Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
    echo "Total Checks: $TOTAL_CHECKS"
    echo "Successful: $SUCCESS_COUNT"
    echo "Failed: $((TOTAL_CHECKS - SUCCESS_COUNT))"
    echo "Warnings: ${#WARNINGS[@]}"
    echo ""
    
    if [ $SUCCESS_COUNT -eq $TOTAL_CHECKS ]; then
        log_success "‚úÖ ALL CHECKS PASSED!"
        echo "Your CI/CD pipeline is ready for deployment."
    else
        log_error "‚ùå SOME CHECKS FAILED!"
        echo "Please fix the following issues before deploying:"
        for error in "${ERRORS[@]}"; do
            echo "  ‚Ä¢ $error"
        done
    fi
    
    if [ ${#WARNINGS[@]} -gt 0 ]; then
        echo ""
        log_warning "‚ö†Ô∏è WARNINGS:"
        for warning in "${WARNINGS[@]}"; do
            echo "  ‚Ä¢ $warning"
        done
    fi
    
    echo ""
    echo "üîó Next Steps:"
    if [ $SUCCESS_COUNT -eq $TOTAL_CHECKS ]; then
        echo "  1. Commit and push your changes to trigger CI/CD"
        echo "  2. Monitor deployment: https://github.com/your-repo/actions"
        echo "  3. Check ArgoCD: https://argo.jclee.me"
        echo "  4. Verify application: https://fortinet.jclee.me"
    else
        echo "  1. Fix the failed checks listed above"
        echo "  2. Run this validation script again"
        echo "  3. Ensure all environments are properly configured"
    fi
    echo "====================================="
}

# Î©îÏù∏ Ìï®Ïàò
main() {
    echo "üöÄ Starting CI/CD Pipeline Validation..."
    echo ""
    
    # Î™®Îì† Í≤ÄÏ¶ù Ïã§Ìñâ
    run_check "GitHub Workflows Validation" check_github_workflows
    run_check "Docker Environment Check" check_docker_environment  
    run_check "Kubernetes Access Check" check_kubernetes_access
    run_check "ArgoCD Access Check" check_argocd_access
    run_check "Registry Access Check" check_registries
    run_check "Helm Environment Check" check_helm_environment
    run_check "Python Environment Check" check_python_environment
    run_check "Project Structure Check" check_project_structure
    run_check "Environment Configuration Check" check_environment_config
    run_check "Network Connectivity Check" check_network_connectivity
    run_check "Script Permissions Check" check_script_permissions
    
    # Î≥¥Í≥†ÏÑú ÏÉùÏÑ±
    generate_report
    
    # Ï¢ÖÎ£å ÏΩîÎìú ÏÑ§Ï†ï
    exit $((TOTAL_CHECKS - SUCCESS_COUNT))
}

# ÏÇ¨Ïö©Î≤ï ÌëúÏãú
show_usage() {
    cat <<EOF
Usage: $0 [OPTIONS]

CI/CD ÌååÏù¥ÌîÑÎùºÏù∏ Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏

OPTIONS:
    -h, --help      Ïù¥ ÎèÑÏõÄÎßê ÌëúÏãú
    -v, --verbose   ÏÉÅÏÑ∏Ìïú Ï∂úÎ†• ÌëúÏãú
    -q, --quiet     Ïò§Î•òÎßå ÌëúÏãú

Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Îäî Îã§ÏùåÏùÑ Í≤ÄÏ¶ùÌï©ÎãàÎã§:
  ‚Ä¢ GitHub Actions ÏõåÌÅ¨ÌîåÎ°úÏö∞
  ‚Ä¢ Docker Î∞è Registry Ï†ëÍ∑º
  ‚Ä¢ Kubernetes ÌÅ¥Îü¨Ïä§ÌÑ∞ Ïó∞Í≤∞
  ‚Ä¢ ArgoCD Ï†ëÍ∑º Î∞è ÏÑ§Ï†ï
  ‚Ä¢ Helm ÌôòÍ≤Ω Î∞è Ï∞®Ìä∏
  ‚Ä¢ Python ÌôòÍ≤Ω Î∞è ÌÖåÏä§Ìä∏
  ‚Ä¢ ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞
  ‚Ä¢ ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞
  ‚Ä¢ Ïä§ÌÅ¨Î¶ΩÌä∏ Í∂åÌïú

EOF
}

# Ïù∏Ïàò ÌååÏã±
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -v|--verbose)
            set -x
            shift
            ;;
        -q|--quiet)
            # Ïò§Î•òÎßå ÌëúÏãúÌïòÎèÑÎ°ù Î°úÍ∑∏ Ìï®Ïàò Ïû¨Ï†ïÏùò
            log_info() { :; }
            log_success() { :; }
            log_check() { :; }
            shift
            ;;
        *)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi