name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY || 'registry.jclee.me' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'fortinet' }}
  PYTHON_VERSION: '3.11'
  DEPLOY_METHOD: ${{ vars.DEPLOY_METHOD || 'argocd' }}  # argocd, k8s-direct

jobs:
  # 테스트 및 품질 검사
  test:
    name: 🧪 Test & Quality
    runs-on: ${{ github.repository_owner == 'JCLEE94' && 'self-hosted' || 'ubuntu-latest' }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy
        
    - name: 🔍 Code Quality
      run: |
        echo "Running code quality checks..."
        black --check src/ || true
        flake8 src/ --max-line-length=120 --ignore=E203,W503 || true
        mypy src/ --ignore-missing-imports || true
        
    - name: 🧪 Run Tests
      run: |
        cd src
        python -m pytest ../tests/ -v || echo "Some tests failed"

  # Docker 빌드
  build:
    name: 🏗️ Build & Push
    needs: test
    runs-on: ${{ github.repository_owner == 'JCLEE94' && 'self-hosted' || 'ubuntu-latest' }}
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🏷️ Docker Meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔐 Registry Login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: 🏗️ Build and Push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # 배포
  deploy:
    name: 🚀 Deploy
    needs: build
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Environment
      run: |
        echo "📋 Deployment Configuration:"
        echo "Method: ${{ env.DEPLOY_METHOD }}"
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Registry: ${{ env.REGISTRY }}"
        
        
    # K8s 직접 배포
    - name: ☸️ Deploy to K8s
      if: env.DEPLOY_METHOD == 'k8s-direct'
      run: |
        echo "☸️ Deploying to Kubernetes..."
        kubectl set image deployment/fortinet-app \
          fortinet=${{ needs.build.outputs.image-tag }} \
          -n fortinet
        kubectl rollout status deployment/fortinet-app -n fortinet
        
    # ArgoCD CLI 설치
    - name: 📦 Install ArgoCD CLI
      if: env.DEPLOY_METHOD == 'argocd'
      run: |
        echo "📦 Installing ArgoCD CLI..."
        curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x argocd
        sudo mv argocd /usr/local/bin/argocd
        argocd version --client

    # ArgoCD 배포 (기본)
    - name: 🎯 Deploy via ArgoCD
      if: env.DEPLOY_METHOD == 'argocd'
      env:
        ARGOCD_SERVER: argo.jclee.me
        ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        ARGOCD_OPTS: --grpc-web
      run: |
        echo "🎯 Deploying via ArgoCD..."
        
        # Extract image tag from build output
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | grep "latest" | head -n1)
        SHORT_SHA="${{ github.sha }}"
        
        echo "Image tag: $IMAGE_TAG"
        echo "Short SHA: $SHORT_SHA"
        
        # Update kustomization.yaml with new image tag
        sed -i "s|newTag:.*|newTag: $SHORT_SHA|g" k8s/manifests/kustomization.yaml
        
        # Commit and push changes
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        git add k8s/manifests/kustomization.yaml
        
        if ! git diff --cached --quiet; then
          git commit -m "🚀 Update image tag to $SHORT_SHA

          📋 Deployment Info:
          - Triggered by: ${{ github.event_name }}
          - Branch: ${{ github.ref_name }}
          - Actor: ${{ github.actor }}
          - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$SHORT_SHA
          - Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          🤖 Auto-generated by GitHub Actions"
          
          git push origin HEAD:${{ github.ref_name }}
          echo "✅ Git changes pushed successfully"
        else
          echo "ℹ️ No changes to commit"
        fi
        
        # Wait for git to propagate
        sleep 5
        
        # Trigger ArgoCD sync via API
        echo "🔄 Triggering ArgoCD sync..."
        SYNC_RESPONSE=$(curl -s -X POST "https://argo.jclee.me/api/v1/applications/${{ vars.ARGOCD_APP_NAME || 'fortinet' }}/sync" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_AUTH_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "prune": true, 
            "dryRun": false,
            "strategy": {
              "hook": {"force": true}
            },
            "syncOptions": {
              "items": ["CreateNamespace=true", "PrunePropagationPolicy=foreground"]
            }
          }' \
          --fail -w "%{http_code}" || echo "SYNC_FAILED")
          
        if [[ "$SYNC_RESPONSE" == *"200"* ]] || [[ "$SYNC_RESPONSE" == *"202"* ]]; then
          echo "✅ ArgoCD sync triggered successfully"
        else
          echo "⚠️ ArgoCD API sync failed (HTTP: $SYNC_RESPONSE), relying on auto-sync"
        fi
        
        # Get application status
        echo "📊 Checking ArgoCD application status..."
        argocd app get ${{ vars.ARGOCD_APP_NAME || 'fortinet' }} --grpc-web || echo "Status check failed"
        
    # 헬스 체크
    - name: 🏥 Health Check
      if: always()
      run: |
        echo "🏥 Running health check..."
        sleep 60  # Wait for deployment
        
        # Check application health
        for i in {1..5}; do
          if curl -f -k -s https://fortinet.jclee.me/api/health; then
            echo "✅ Application is healthy!"
            break
          fi
          echo "Attempt $i/5 failed, waiting..."
          sleep 30
        done

  # 알림
  notify:
    name: 📢 Notify
    needs: [test, build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Summary
      run: |
        echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY