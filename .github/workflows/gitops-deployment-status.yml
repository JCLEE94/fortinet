name: 🔍 GitOps Deployment Status Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # 5분마다 실행
  workflow_dispatch:

env:
  DEPLOYMENT_HOST: 192.168.50.110
  DEPLOYMENT_PORT: 30777
  ARGOCD_SERVER: argo.jclee.me

jobs:
  monitor:
    runs-on: self-hosted
    steps:
      - name: 🔍 Health Check
        id: health
        run: |
          echo "🏥 서비스 Health Check 실행..."
          
          if curl -f -s --connect-timeout 5 --max-time 10 "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health" > /dev/null; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "✅ 서비스 정상"
            
            # Health 정보 조회
            HEALTH_INFO=$(curl -s "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health")
            echo "health_info=$HEALTH_INFO" >> $GITHUB_OUTPUT
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "❌ 서비스 비정상"
          fi

      - name: 📊 Status Report
        run: |
          echo "📊 GitOps 배포 상태 보고서"
          echo "========================="
          echo ""
          echo "🏥 Health Status: ${{ steps.health.outputs.status }}"
          echo "🔗 Service URL: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}"
          echo "🌐 External URL: https://fortinet.jclee.me"
          echo "📊 ArgoCD: https://${{ env.ARGOCD_SERVER }}"
          echo ""
          
          if [ "${{ steps.health.outputs.status }}" = "healthy" ]; then
            echo "✅ 모든 서비스가 정상 작동 중입니다."
            if [ -n "${{ steps.health.outputs.health_info }}" ]; then
              echo ""
              echo "📋 Health Details:"
              echo "${{ steps.health.outputs.health_info }}"
            fi
          else
            echo "❌ 서비스에 문제가 있습니다."
            echo ""
            echo "🔍 문제 해결 단계:"
            echo "1. ArgoCD 상태 확인: https://${{ env.ARGOCD_SERVER }}"
            echo "2. Pod 로그 확인: kubectl logs -l app=fortinet -n fortinet"
            echo "3. Service 상태 확인: kubectl get svc -n fortinet"
          fi