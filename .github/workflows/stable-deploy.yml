name: Stable Deploy

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Deployment reason'
        required: false
        default: 'Manual deployment'

env:
  REGISTRY: 'registry.jclee.me'
  IMAGE_NAME: 'fortinet'
  PYTHON_VERSION: '3.11'

jobs:
  test-and-build:
    name: üß™ Test & Build
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.vars.outputs.short-sha }}
      
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      
    - name: üîß Set Variables
      id: vars
      run: |
        echo "short-sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: üß™ Run Tests
      run: |
        cd src
        # Run basic import test
        python -c "
import sys
try:
    import web_app
    print('‚úÖ Import test passed')
except Exception as e:
    print(f'‚ùå Import test failed: {e}')
    sys.exit(1)
"
        # Run minimal tests if available
        if [ -f "../tests/test_imports.py" ]; then
          python -m pytest ../tests/test_imports.py -v || echo "Test warnings detected"
        fi
        
    - name: üîê Registry Login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: üèóÔ∏è Build and Push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short-sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: üöÄ Deploy
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üîß Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
    - name: üìù Update Kustomization
      run: |
        echo "üîß Updating kustomization.yaml with new image tag..."
        
        # Update image tag
        sed -i "s|newTag:.*|newTag: ${{ needs.test-and-build.outputs.image-tag }}|g" k8s/manifests/kustomization.yaml
        
        # Show changes
        echo "üìã Changes to be committed:"
        git diff k8s/manifests/kustomization.yaml
        
        # Commit and push
        git add k8s/manifests/kustomization.yaml
        git commit -m "üöÄ Deploy: ${{ needs.test-and-build.outputs.image-tag }}
        
Actor: ${{ github.actor }}
Reason: ${{ github.event.inputs.reason || github.event.head_commit.message }}
Build: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        git push origin HEAD:${{ github.ref_name }}
        
    - name: üìä Summary
      run: |
        echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.test-and-build.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
        echo "- [ArgoCD Dashboard](https://argo.jclee.me/applications/fortinet)" >> $GITHUB_STEP_SUMMARY
        echo "- [Application](https://fortinet.jclee.me)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚è±Ô∏è Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "ArgoCD will automatically sync the changes within 3 minutes." >> $GITHUB_STEP_SUMMARY
        
  health-check:
    name: üè• Health Check
    needs: deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: ‚è≥ Wait for Deployment
      run: |
        echo "‚è≥ Waiting 90 seconds for deployment to stabilize..."
        sleep 90
        
    - name: üè• Check Application Health
      run: |
        echo "üè• Checking application health..."
        
        for i in {1..5}; do
          echo "Attempt $i/5..."
          
          # Try to reach the health endpoint
          if curl -f -s -m 10 https://fortinet.jclee.me/api/health > /dev/null 2>&1; then
            echo "‚úÖ Application is healthy!"
            
            # Get health details
            echo ""
            echo "üìä Health Details:"
            curl -s https://fortinet.jclee.me/api/health | jq . || curl -s https://fortinet.jclee.me/api/health
            exit 0
          else
            echo "‚ùå Health check failed"
          fi
          
          if [ $i -lt 5 ]; then
            echo "‚è≥ Waiting 30 seconds before retry..."
            sleep 30
          fi
        done
        
        echo ""
        echo "‚ö†Ô∏è Health checks failed after 5 attempts"
        echo "Please check:"
        echo "- ArgoCD: https://argo.jclee.me/applications/fortinet"
        echo "- Application: https://fortinet.jclee.me"
        exit 1