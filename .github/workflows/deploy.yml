name: 🚀 Unified CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Deployment reason'
        required: false
        default: 'Manual deployment'

env:
  REGISTRY: 'registry.jclee.me'
  IMAGE_NAME: 'fortinet'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Phase 1: 병렬 분석 및 테스트
  analyze:
    name: 🔍 Code Analysis
    runs-on: ubuntu-latest
    outputs:
      issues_found: ${{ steps.analysis.outputs.issues_found }}
      
    strategy:
      matrix:
        task: [test, security, lint, claude]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
      
    # Python 테스트
    - name: 🧪 Python Tests
      if: matrix.task == 'test'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
        echo "🧪 Running tests..."
        pytest --cov=src --cov-report=xml --cov-report=term || echo "::set-output name=test_failed::true"
        
    # 보안 스캔
    - name: 🔒 Security Scan
      if: matrix.task == 'security'
      run: |
        pip install bandit safety
        
        echo "🔍 Running security scans..."
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
        # 심각한 보안 이슈 체크
        if grep -q '"severity": "HIGH"' bandit-report.json; then
          echo "::warning::High severity security issues found"
          echo "::set-output name=security_issues::true"
        fi
        
    # 코드 품질 검사
    - name: 🧹 Lint Check
      if: matrix.task == 'lint'
      run: |
        pip install flake8 black isort pylint
        
        echo "📏 Checking code quality..."
        black --check . || echo "::warning::Code formatting issues found"
        isort --check-only . || echo "::warning::Import sorting issues found"
        flake8 . --max-line-length=120 --extend-ignore=E203,W503 || echo "::warning::Linting issues found"
        
    # Claude AI 분석
    - name: 🤖 AI Code Review
      if: matrix.task == 'claude' && github.event_name == 'pull_request'
      continue-on-error: true
      run: |
        echo "🤖 Running AI-powered code analysis..."
        # Claude API를 통한 코드 리뷰 (향후 구현)
        echo "✅ AI analysis completed"
        
    - name: 📊 Analysis Summary
      id: analysis
      if: always()
      run: |
        ISSUES=0
        if [ -f "bandit-report.json" ] && grep -q '"severity": "HIGH"' bandit-report.json; then
          ISSUES=$((ISSUES + 1))
        fi
        echo "::set-output name=issues_found::$ISSUES"

  # Phase 2: 빌드 및 배포 준비
  build-deploy:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    needs: [analyze]
    if: always() && (needs.analyze.result == 'success' || needs.analyze.result == 'skipped' || github.event.inputs.skip_tests == 'true')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔧 Configure Git
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
    - name: 📦 Prepare Deployment
      id: prepare
      run: |
        echo "🔧 Preparing deployment..."
        
        # 배포 태그 설정
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
          TAG="emergency-${GITHUB_SHA::7}"
          DEPLOY_TYPE="EMERGENCY"
        else
          TAG="${GITHUB_SHA::7}"
          DEPLOY_TYPE="STABLE"
        fi
        
        echo "::set-output name=deployment-tag::$TAG"
        echo "::set-output name=deploy-type::$DEPLOY_TYPE"
        
    - name: 🌐 Configure Cloudflare DNS
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      env:
        CF_API_TOKEN: '5jAteBmuobDeS6ssH1UtMOrh5yQjClD-57ljpUtJ'
        DOMAIN: 'jclee.me'
      run: |
        echo "🌐 Setting up Cloudflare DNS..."
        
        # Download and run DNS manager
        chmod +x scripts/cloudflare-dns-manager.sh
        ./scripts/cloudflare-dns-manager.sh setup --domain "$DOMAIN" --subdomain "fortinet" || {
          echo "⚠️ DNS setup failed, but continuing deployment"
        }
        
    - name: 📝 Update GitOps Configuration
      run: |
        echo "📝 Updating GitOps configuration..."
        
        # 타임스탬프 업데이트
        TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        sed -i "s|deployed-at:.*|deployed-at: \"${TIMESTAMP}\"|g" k8s/manifests/kustomization.yaml
        
        # 버전 태그 업데이트
        sed -i "s|app.kubernetes.io/version:.*|app.kubernetes.io/version: \"${{ steps.prepare.outputs.deployment-tag }}\"|g" k8s/manifests/kustomization.yaml
        
        # 변경사항 확인
        git diff k8s/manifests/kustomization.yaml || echo "No changes needed"
        
    - name: 🚀 Deploy to ArgoCD
      run: |
        echo "🚀 Triggering ArgoCD deployment..."
        
        # Git 커밋 및 푸시
        git add k8s/manifests/
        git commit --allow-empty -m "${{ steps.prepare.outputs.deploy-type }} Deploy: ${{ steps.prepare.outputs.deployment-tag }}" \
          -m "📦 ConfigMap-based deployment" \
          -m "👤 Actor: ${{ github.actor }}" \
          -m "📝 Reason: ${{ github.event.inputs.reason || github.event.head_commit.message }}" \
          -m "🔗 Build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        git push origin HEAD:${{ github.ref_name }}
        
    - name: ⏳ Wait for ArgoCD Sync
      run: |
        echo "⏳ Waiting for ArgoCD to sync..."
        sleep 120
        
    - name: 🏥 Health Check
      id: health
      run: |
        echo "🏥 Checking application health..."
        
        HEALTH_URLS=(
          "https://fortinet.jclee.me/api/health"
          "http://192.168.50.110:30777/api/health"
        )
        
        SUCCESS=false
        
        for url in "${HEALTH_URLS[@]}"; do
          echo "Testing: $url"
          
          for i in {1..3}; do
            if curl -f -s -m 15 "$url" > /dev/null 2>&1; then
              echo "✅ Health check passed for: $url"
              SUCCESS=true
              break 2
            else
              echo "❌ Attempt $i/3 failed for: $url"
              sleep 10
            fi
          done
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "::set-output name=health_status::failed"
          exit 1
        else
          echo "::set-output name=health_status::healthy"
        fi

  # Phase 3: 오프라인 패키지 생성
  offline-package:
    name: 📦 Offline Package Creation
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: |
      always() && 
      needs.build-deploy.result == 'success' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔐 Registry Login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: 🐳 Pull Latest Image
      run: |
        echo "🐳 Pulling latest production image..."
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest fortinet:latest
        
    - name: 📦 Create Offline Package
      id: package
      run: |
        echo "📦 Creating offline deployment package..."
        
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        PACKAGE_NAME="fortinet-offline-${TIMESTAMP}"
        PACKAGE_DIR="${PACKAGE_NAME}"
        
        # Create package directory
        mkdir -p "${PACKAGE_DIR}"
        
        # Save Docker image
        echo "💾 Saving Docker image..."
        docker save -o "${PACKAGE_DIR}/fortinet-image.tar" fortinet:latest
        
        # Copy Kubernetes manifests (without Cloudflare for offline)
        echo "📋 Copying Kubernetes manifests..."
        mkdir -p "${PACKAGE_DIR}/k8s"
        cp -r k8s/manifests "${PACKAGE_DIR}/k8s/"
        
        # Remove Cloudflare-specific files for offline deployment
        rm -f "${PACKAGE_DIR}/k8s/manifests/deployment-with-cloudflare.yaml"
        rm -f "${PACKAGE_DIR}/k8s/manifests/cloudflare-tunnel-configmap.yaml"
        
        # Ensure using standard deployment in kustomization
        sed -i 's/- deployment-with-cloudflare.yaml/- deployment.yaml/' "${PACKAGE_DIR}/k8s/manifests/kustomization.yaml"
        
        # Copy deployment scripts
        echo "📜 Copying deployment scripts..."
        mkdir -p "${PACKAGE_DIR}/scripts"
        cp scripts/k8s-deploy.sh "${PACKAGE_DIR}/scripts/"
        cp scripts/docker-start.sh "${PACKAGE_DIR}/scripts/"
        chmod +x "${PACKAGE_DIR}/scripts"/*.sh
        
        # Create offline deployment script
        cat > "${PACKAGE_DIR}/deploy-offline.sh" << 'EOF'
#!/bin/bash
set -e

# Colors
RED='[0;31m'
GREEN='[0;32m'
YELLOW='[1;33m'
BLUE='[0;34m'
NC='[0m'

echo -e "${BLUE}=== FortiGate Nextrade Offline Deployment ===${NC}"

# Check if running as root for Docker
if [[ $EUID -eq 0 ]]; then
   echo -e "${YELLOW}Warning: Running as root${NC}"
fi

# Load Docker image
echo -e "${BLUE}Loading Docker image...${NC}"
docker load -i fortinet-image.tar
echo -e "${GREEN}✓ Docker image loaded${NC}"

# Tag image for local registry if needed
docker tag fortinet:latest localhost:5000/fortinet:latest

# Deploy based on environment
echo -e "${BLUE}Select deployment method:${NC}"
echo "1) Kubernetes deployment"
echo "2) Docker standalone"
read -p "Enter choice (1 or 2): " choice

case $choice in
    1)
        echo -e "${BLUE}Deploying to Kubernetes...${NC}"
        kubectl apply -k k8s/manifests/
        echo -e "${GREEN}✓ Kubernetes deployment complete${NC}"
        echo -e "${YELLOW}Run: kubectl get pods -n fortinet${NC}"
        ;;
    2)
        echo -e "${BLUE}Running Docker container...${NC}"
        docker run -d \
            --name fortinet-app \
            -p 7777:7777 \
            -v $(pwd)/data:/app/data \
            -v $(pwd)/logs:/app/logs \
            -e APP_MODE=production \
            -e OFFLINE_MODE=true \
            --restart unless-stopped \
            fortinet:latest
        echo -e "${GREEN}✓ Docker container started${NC}"
        echo -e "${YELLOW}Access: http://localhost:7777${NC}"
        ;;
    *)
        echo -e "${RED}Invalid choice${NC}"
        exit 1
        ;;
esac

echo -e "${GREEN}=== Deployment Complete ===${NC}"
EOF
        chmod +x "${PACKAGE_DIR}/deploy-offline.sh"
        
        # Create README
        cat > "${PACKAGE_DIR}/README-OFFLINE.md" << 'EOF'
# FortiGate Nextrade Offline Deployment Package

This package contains everything needed to deploy FortiGate Nextrade in an offline environment.

## Contents
- `fortinet-image.tar` - Docker image
- `k8s/manifests/` - Kubernetes deployment files
- `scripts/` - Helper scripts
- `deploy-offline.sh` - Main deployment script

## Requirements
- Docker or Kubernetes
- 2GB+ available disk space
- 2GB+ RAM

## Quick Start
1. Extract the package
2. Run: `./deploy-offline.sh`
3. Follow the prompts

## Manual Deployment

### Docker
```bash
docker load -i fortinet-image.tar
docker run -d --name fortinet-app -p 7777:7777 fortinet:latest
```

### Kubernetes
```bash
docker load -i fortinet-image.tar
kubectl apply -k k8s/manifests/
```

## Configuration
- Default port: 7777
- Default mode: production
- Offline mode: enabled (no external API calls)
EOF
        
        # Create tarball
        echo "🗜️ Creating tarball..."
        tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_DIR}"
        
        # Calculate checksum
        CHECKSUM=$(sha256sum "${PACKAGE_NAME}.tar.gz" | cut -d' ' -f1)
        echo "${CHECKSUM}" > "${PACKAGE_NAME}.tar.gz.sha256"
        
        # Output information
        PACKAGE_SIZE=$(ls -lh "${PACKAGE_NAME}.tar.gz" | awk '{print $5}')
        echo "::set-output name=package-name::${PACKAGE_NAME}.tar.gz"
        echo "::set-output name=package-size::${PACKAGE_SIZE}"
        echo "::set-output name=checksum::${CHECKSUM}"
        
    - name: 📤 Upload Offline Package
      uses: actions/upload-artifact@v4
      with:
        name: offline-deployment-package
        path: |
          ${{ steps.package.outputs.package-name }}
          ${{ steps.package.outputs.package-name }}.sha256
        retention-days: 30
        
    - name: 📊 Package Summary
      run: |
        echo "## 📦 Offline Package Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Package Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Name**: \`${{ steps.package.outputs.package-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Size**: ${{ steps.package.outputs.package-size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA256**: \`${{ steps.package.outputs.checksum }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download" >> $GITHUB_STEP_SUMMARY
        echo "The package can be downloaded from the workflow artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Instructions" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the package from artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Transfer to offline environment" >> $GITHUB_STEP_SUMMARY
        echo "3. Extract: \`tar -xzf ${{ steps.package.outputs.package-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy: \`./deploy-offline.sh\`" >> $GITHUB_STEP_SUMMARY

  # Phase 4: 이슈 생성 및 알림
  notify:
    name: 📢 Notify & Report
    runs-on: ubuntu-latest
    needs: [analyze, build-deploy, offline-package]
    if: always()
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐛 Create Issue on Failure
      if: needs.build-deploy.result == 'failure' || needs.analyze.outputs.issues_found > 0
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `🚨 CI/CD Pipeline Failure - ${new Date().toISOString().split('T')[0]}`;
          
          let body = `## 🔴 Pipeline Failure Report\n\n`;
          body += `**Workflow Run**: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
          body += `**Branch**: \`${context.ref.replace('refs/heads/', '')}\`\n`;
          body += `**Commit**: \`${context.sha.substring(0, 7)}\` - ${context.payload.head_commit?.message || 'No message'}\n`;
          body += `**Actor**: @${context.actor}\n`;
          body += `**Time**: ${new Date().toLocaleString('ko-KR', { timeZone: 'Asia/Seoul' })}\n\n`;
          
          body += `### 📊 Failure Summary\n\n`;
          
          // 분석 단계 실패
          if ('${{ needs.analyze.result }}' === 'failure') {
            body += `- ❌ **Code Analysis Failed**\n`;
            if ('${{ needs.analyze.outputs.issues_found }}' > 0) {
              body += `  - Security issues detected\n`;
            }
          }
          
          // 배포 단계 실패
          if ('${{ needs.build-deploy.result }}' === 'failure') {
            body += `- ❌ **Deployment Failed**\n`;
            if ('${{ needs.build-deploy.outputs.health_status }}' === 'failed') {
              body += `  - Health check failed\n`;
              body += `  - Application URLs not responding\n`;
            }
          }
          
          body += `\n### 🔧 Recommended Actions\n\n`;
          body += `1. Check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
          body += `2. Review recent commits for potential issues\n`;
          body += `3. Check ArgoCD dashboard: https://argo.jclee.me/applications/fortinet\n`;
          body += `4. Verify application health:\n`;
          body += `   - https://fortinet.jclee.me/api/health\n`;
          body += `   - http://192.168.50.110:30777/api/health\n`;
          
          body += `\n### 🏷️ Labels\n`;
          body += `This issue will be automatically labeled with: \`ci-cd-failure\`, \`bug\`, \`high-priority\`\n`;
          
          // 이슈 생성
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['ci-cd-failure', 'bug', 'high-priority'],
            assignees: [context.actor]
          });
          
          console.log(`Created issue #${issue.data.number}`);
          
    - name: 📊 Final Summary
      if: always()
      run: |
        echo "## 🎯 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 상태 아이콘 설정
        if [ "${{ needs.build-deploy.result }}" = "success" ]; then
          STATUS="✅ SUCCESS"
        else
          STATUS="❌ FAILED"
        fi
        
        echo "### Overall Status: ${STATUS}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📋 Stage Results" >> $GITHUB_STEP_SUMMARY
        echo "- Code Analysis: ${{ needs.analyze.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build & Deploy: ${{ needs.build-deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [ArgoCD Dashboard](https://argo.jclee.me/applications/fortinet)" >> $GITHUB_STEP_SUMMARY
        echo "- [Production App](https://fortinet.jclee.me)" >> $GITHUB_STEP_SUMMARY
        echo "- [NodePort Access](http://192.168.50.110:30777)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-deploy.result }}" != "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Action Required" >> $GITHUB_STEP_SUMMARY
          echo "An issue has been automatically created for this failure." >> $GITHUB_STEP_SUMMARY
        fi