name: GitOps CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  REGISTRY_URL: registry.jclee.me
  IMAGE_NAME: fortinet
  CHARTMUSEUM_URL: https://charts.jclee.me

jobs:
  test:
    name: Test Phase
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest flake8 black isort safety bandit

    - name: Code formatting check
      run: |
        black --check --diff src/
        isort --check-only --diff src/

    - name: Linting
      run: |
        flake8 src/ --max-line-length=120 --ignore=E203,W503

    - name: Security scan - Python dependencies
      run: |
        safety check --json || true

    - name: Security scan - Code
      run: |
        bandit -r src/ -f json || true

    - name: Run tests
      run: |
        cd src && python -m pytest ../tests/ -v --tb=short || true

  build:
    name: Build Phase
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Harbor Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-{{sha}}
          type=ref,event=pr,suffix=-{{sha}}
          type=raw,value=${{ github.ref_name }}-${{ github.sha }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=$(date -u +%Y-%m-%d)
          BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          GIT_COMMIT=${{ github.sha }}
          GIT_SHA=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          VERSION=v1.2.${{ github.run_number }}
          IMMUTABLE_TAG=${{ github.ref_name }}-${{ github.sha }}
          REGISTRY_URL=${{ env.REGISTRY_URL }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Image security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  deploy:
    name: Deploy Phase
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Package Helm chart
      run: |
        # Update chart version with build info
        CHART_VERSION="1.2.${{ github.run_number }}"
        APP_VERSION="${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-7)"
        IMAGE_TAG="${{ github.ref_name }}-$(echo ${{ github.sha }} | cut -c1-7)"
        
        echo "Chart Version: ${CHART_VERSION}"
        echo "App Version: ${APP_VERSION}"
        echo "Image Tag: ${IMAGE_TAG}"
        
        # Update Chart.yaml
        sed -i "s/version: .*/version: ${CHART_VERSION}/" charts/fortinet/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"${APP_VERSION}\"/" charts/fortinet/Chart.yaml
        
        # Update values.yaml with new image tag
        sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" charts/fortinet/values.yaml
        
        # Package chart
        helm package charts/fortinet --destination ./

    - name: Upload to ChartMuseum
      run: |
        CHART_FILE=$(find . -name "fortinet-*.tgz" -type f)
        if [ -f "$CHART_FILE" ]; then
          curl --fail -L --data-binary "@${CHART_FILE}" \
            -u "${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }}" \
            "${{ env.CHARTMUSEUM_URL }}/api/charts"
        else
          echo "No chart file found"
          exit 1
        fi

    - name: Update Kubernetes manifests (GitOps)
      run: |
        # Update image tag in values.yaml for GitOps
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="${{ github.ref_name }}-${SHORT_SHA}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "Updating GitOps manifests with image tag: ${IMAGE_TAG}"
        
        # Update the image tag in values.yaml
        sed -i "s|tag: .*|tag: \"${IMAGE_TAG}\"|" charts/fortinet/values.yaml
        
        # Update GitOps metadata
        sed -i "s/GIT_SHA: .*/GIT_SHA: \"${SHORT_SHA}\"/" charts/fortinet/values.yaml
        sed -i "s/GIT_COMMIT: .*/GIT_COMMIT: \"${{ github.sha }}\"/" charts/fortinet/values.yaml
        sed -i "s/GIT_BRANCH: .*/GIT_BRANCH: \"${{ github.ref_name }}\"/" charts/fortinet/values.yaml
        sed -i "s/BUILD_DATE: .*/BUILD_DATE: \"$(date -u +%Y-%m-%d)\"/" charts/fortinet/values.yaml
        sed -i "s/BUILD_TIMESTAMP: .*/BUILD_TIMESTAMP: \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"/" charts/fortinet/values.yaml
        sed -i "s/VERSION: .*/VERSION: \"v1.2.${{ github.run_number }}\"/" charts/fortinet/values.yaml
        
        # Commit changes
        git add charts/fortinet/values.yaml charts/fortinet/Chart.yaml
        git commit -m "chore: update image to ${IMAGE_TAG} [skip ci]" || exit 0
        git push

    - name: Trigger ArgoCD sync
      run: |
        # Wait a moment for git push to propagate
        sleep 10
        
        # Trigger ArgoCD sync (if ArgoCD webhook is configured)
        curl -X POST "http://192.168.50.110:31017/api/v1/applications/fortinet/sync" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"prune": true, "dryRun": false, "strategy": {"hook": {"force": true}}}' \
          --connect-timeout 10 --max-time 30 || echo "ArgoCD sync trigger failed, but continuing..."

  verify:
    name: Verify Phase
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 60

    - name: Health check - NodePort
      run: |
        echo "Testing NodePort health endpoint..."
        for i in {1..10}; do
          if curl -f --connect-timeout 5 --max-time 10 \
             "http://192.168.50.110:30777/api/health"; then
            echo "‚úÖ Health check passed on attempt $i"
            exit 0
          fi
          echo "‚ùå Health check failed on attempt $i, retrying..."
          sleep 10
        done
        echo "‚ùå Health check failed after 10 attempts"
        exit 1

    - name: Health check - Domain (optional)
      run: |
        echo "Testing domain health endpoint..."
        curl -f --connect-timeout 5 --max-time 10 \
          -H "Host: fortinet.jclee.me" \
          "http://192.168.50.110:30777/api/health" || echo "Domain check failed (may be expected)"

    - name: Deployment summary
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="${{ github.ref_name }}-${SHORT_SHA}"
        
        echo "üöÄ DEPLOYMENT SUCCESSFUL"
        echo "================================"
        echo "Image: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        echo "Chart Version: 1.2.${{ github.run_number }}"
        echo "Git Commit: ${{ github.sha }}"
        echo "Git SHA (Short): ${SHORT_SHA}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Build Number: ${{ github.run_number }}"
        echo ""
        echo "Access URLs:"
        echo "  NodePort: http://192.168.50.110:30777"
        echo "  Domain: http://fortinet.jclee.me"
        echo "  Health: http://192.168.50.110:30777/api/health"
        echo ""
        echo "GitOps Repository: ${{ github.repository }}"
        echo "ArgoCD Application: fortinet"
        echo "================================"