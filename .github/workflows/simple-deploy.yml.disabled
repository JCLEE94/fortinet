name: Simple Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: false
        default: 'Manual deployment'
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

env:
  REGISTRY: 'registry.jclee.me'
  IMAGE_NAME: 'fortinet'
  ARGOCD_SERVER: 'argo.jclee.me'
  ARGOCD_APP_NAME: 'fortinet'

jobs:
  deploy:
    name: üöÄ Simple Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üîß Set Variables
      id: vars
      run: |
        echo "short-sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üß™ Quick Test
      run: |
        echo "Running quick tests..."
        python -m pip install --upgrade pip
        pip install pytest requests flask
        cd src && python -c "import web_app; print('Import test passed')" || true
        
    - name: üîê Registry Login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: üèóÔ∏è Build and Push
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short-sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          VCS_REF=${{ github.sha }}
          
    - name: üéØ Update Kustomization
      run: |
        echo "üîß Updating kustomization.yaml..."
        
        # Update image tag
        sed -i "s|newTag:.*|newTag: ${{ steps.vars.outputs.short-sha }}|g" k8s/manifests/kustomization.yaml
        
        # Configure git
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # Commit and push
        git add k8s/manifests/kustomization.yaml
        git commit -m "üöÄ Deploy: Update image tag to ${{ steps.vars.outputs.short-sha }}
        
Deployment Info:
- Message: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}
- Actor: ${{ github.actor }}
- Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        
        git push origin HEAD:${{ github.ref_name }}
        
    - name: üîÑ Trigger ArgoCD Sync (Optional)
      continue-on-error: true
      run: |
        echo "üîÑ Attempting ArgoCD sync..."
        
        # Try to trigger sync if credentials are available
        if [[ -n "${{ secrets.ARGOCD_AUTH_TOKEN }}" ]]; then
          curl -k -X POST https://${{ env.ARGOCD_SERVER }}/api/v1/applications/${{ env.ARGOCD_APP_NAME }}/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"prune": true}' || echo "ArgoCD sync failed, but will auto-sync"
        else
          echo "No ArgoCD token, relying on auto-sync"
        fi
        
    - name: üìä Summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short-sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ github.event.inputs.deploy_message || github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links" >> $GITHUB_STEP_SUMMARY
        echo "- [ArgoCD Dashboard](https://argo.jclee.me/applications/${{ env.ARGOCD_APP_NAME }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Application](https://fortinet.jclee.me)" >> $GITHUB_STEP_SUMMARY
        
    - name: üè• Health Check
      if: always()
      run: |
        echo "‚è≥ Waiting 60s for deployment..."
        sleep 60
        
        echo "üè• Checking application health..."
        for i in {1..5}; do
          if curl -f -k -s -m 10 https://fortinet.jclee.me/api/health; then
            echo "‚úÖ Application is healthy!"
            exit 0
          fi
          echo "Attempt $i/5 failed, waiting 30s..."
          sleep 30
        done
        
        echo "‚ö†Ô∏è Health check failed, but deployment may still succeed via ArgoCD"