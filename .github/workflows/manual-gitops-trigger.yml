name: 🚀 Manual GitOps Trigger

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      force_rebuild:
        description: 'Docker 이미지 강제 리빌드'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: fortinet
  APP_NAME: fortinet
  K8S_NAMESPACE: fortinet
  ARGOCD_SERVER: argo.jclee.me
  DEPLOYMENT_HOST: 192.168.50.110
  DEPLOYMENT_PORT: 30777

jobs:
  manual-gitops-deploy:
    runs-on: self-hosted
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to jclee.me Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: 📋 Generate Image Tags
        id: tags
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          IMAGE_TAG="${SHORT_SHA}-${TIMESTAMP}"
          
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_OUTPUT
          
          echo "🏷️ Generated Image Tag: ${IMAGE_TAG}"

      - name: 🚀 Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.production
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=FortiGate Nextrade
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            gitops.manual-trigger=true
            gitops.environment=${{ github.event.inputs.environment }}

      - name: 🔄 Update GitOps Manifests
        run: |
          cd k8s/overlays/${{ github.event.inputs.environment }}
          
          # Kustomize에서 이미지 태그 업데이트
          sed -i "s/newTag:.*/newTag: ${{ steps.tags.outputs.IMAGE_TAG }}/" kustomization.yaml
          
          echo "📝 Updated kustomization.yaml for ${{ github.event.inputs.environment }}:"
          cat kustomization.yaml

      - name: 📤 Commit GitOps Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions (Manual GitOps)"
          
          git add k8s/overlays/${{ github.event.inputs.environment }}/kustomization.yaml
          git add DEPLOYMENT_TRIGGER.md
          
          if git diff --staged --quiet; then
            echo "⚠️ 변경사항이 없습니다."
          else
            git commit -m "🚀 Manual GitOps: Deploy ${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.IMAGE_TAG }}

🎯 수동 GitOps 배포 실행
- Environment: ${{ github.event.inputs.environment }}
- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tags.outputs.IMAGE_TAG }}
- Commit: ${{ github.sha }}
- Trigger: Manual workflow dispatch
- Timestamp: ${{ steps.tags.outputs.TIMESTAMP }}

🔄 GitOps 프로세스:
1. Docker 이미지 빌드 완료
2. Kustomize 매니페스트 업데이트
3. ArgoCD 자동 동기화 대기 중
4. K8s 클러스터 배포 진행

Co-authored-by: GitHub Actions <action@github.com>"
            
            git push
            echo "✅ GitOps 변경사항 Push 완료!"
          fi

      - name: ⏱️ ArgoCD 동기화 대기
        run: |
          echo "🔄 ArgoCD Pull-based GitOps 동기화 시작..."
          echo "📊 ArgoCD Dashboard: https://${{ env.ARGOCD_SERVER }}/applications/${{ env.APP_NAME }}"
          echo "⌛ 자동 동기화 완료까지 약 2-3분 소요"
          sleep 120

      - name: 🔍 배포 상태 검증
        run: |
          echo "🔍 배포 상태 검증 시작..."
          max_attempts=20
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "🔄 검증 시도 $attempt/$max_attempts"
            
            if curl -f -s --connect-timeout 10 --max-time 20 "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health" > /dev/null; then
              echo "✅ 배포 검증 성공!"
              echo "📊 Health Check 응답:"
              curl -s "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health" | jq . 2>/dev/null || curl -s "http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health"
              break
            else
              echo "⚠️ Health Check 실패 (시도 $attempt/$max_attempts)"
              if [ $attempt -eq $max_attempts ]; then
                echo "❌ 배포 검증 실패!"
                exit 1
              fi
              echo "⏳ 15초 후 재시도..."
              sleep 15
              attempt=$((attempt + 1))
            fi
          done

      - name: 📊 배포 완료 보고서
        if: success()
        run: |
          echo ""
          echo "🚀 GITOPS 배포 완료 보고서"
          echo "========================="
          echo ""
          echo "✅ 배포 정보:"
          echo "  🏷️ Image Tag: ${{ steps.tags.outputs.IMAGE_TAG }}"
          echo "  🌍 Environment: ${{ github.event.inputs.environment }}"
          echo "  📦 Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "  🔄 Commit: ${{ github.sha }}"
          echo ""
          echo "🔗 접속 정보:"
          echo "  🌐 External: https://fortinet.jclee.me"
          echo "  🔗 Internal: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}"
          echo "  🏥 Health: http://${{ env.DEPLOYMENT_HOST }}:${{ env.DEPLOYMENT_PORT }}/api/health"
          echo ""
          echo "📊 GitOps 대시보드:"
          echo "  🔄 ArgoCD: https://${{ env.ARGOCD_SERVER }}"
          echo "  📦 Registry: https://registry.jclee.me"
          echo ""
          echo "🎉 GitOps 배포 성공!"