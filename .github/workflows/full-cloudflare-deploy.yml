name: 🚀 Full Cloudflare Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      dns_action:
        description: 'DNS action'
        required: true
        default: 'create'
        type: choice
        options:
          - create
          - update
          - skip

env:
  REGISTRY: 'registry.jclee.me'
  IMAGE_NAME: 'fortinet'
  DOMAIN: 'jclee.me'
  SUBDOMAIN: 'fortinet'

jobs:
  deploy-with-cloudflare:
    name: 🌐 Complete Cloudflare Deployment
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Tools
      run: |
        # Install required tools
        sudo apt-get update
        sudo apt-get install -y jq dig curl
        
    - name: 🌐 Step 1: Configure DNS
      if: github.event.inputs.dns_action != 'skip'
      env:
        CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
      run: |
        echo "🌐 Configuring Cloudflare DNS..."
        
        # Make script executable
        chmod +x scripts/cloudflare-dns-manager.sh
        
        # Setup DNS
        ./scripts/cloudflare-dns-manager.sh setup \
          --domain "${{ env.DOMAIN }}" \
          --subdomain "${{ env.SUBDOMAIN }}"
        
        # Verify DNS
        echo "🔍 Verifying DNS configuration..."
        ./scripts/cloudflare-dns-manager.sh verify \
          --domain "${{ env.DOMAIN }}" \
          --subdomain "${{ env.SUBDOMAIN }}"
        
    - name: 🔐 Step 2: Create Kubernetes Resources
      env:
        CLOUDFLARE_TUNNEL_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
      run: |
        echo "🔐 Preparing Kubernetes resources..."
        
        # Create secret manifest
        cat > k8s/manifests/cloudflare-tunnel-secret.yaml << EOF
        apiVersion: v1
        kind: Secret
        metadata:
          name: cloudflare-tunnel-token
          namespace: fortinet
        type: Opaque
        data:
          token: $(echo -n "$CLOUDFLARE_TUNNEL_TOKEN" | base64)
        EOF
        
        # Update kustomization
        echo "📝 Updating kustomization.yaml..."
        
        # Use Cloudflare-enabled deployment
        sed -i 's/- deployment.yaml/- deployment-with-cloudflare.yaml/' k8s/manifests/kustomization.yaml
        
        # Add secret to resources if not exists
        if ! grep -q "cloudflare-tunnel-secret.yaml" k8s/manifests/kustomization.yaml; then
          sed -i '/resources:/a\  - cloudflare-tunnel-secret.yaml' k8s/manifests/kustomization.yaml
        fi
        
        # Add configmap if not exists
        if ! grep -q "cloudflare-tunnel-configmap.yaml" k8s/manifests/kustomization.yaml; then
          sed -i '/resources:/a\  - cloudflare-tunnel-configmap.yaml' k8s/manifests/kustomization.yaml
        fi
        
    - name: 🚀 Step 3: Deploy via GitOps
      run: |
        echo "🚀 Triggering deployment..."
        
        # Configure git
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"
        
        # Commit changes
        git add k8s/manifests/
        git commit -m "🌐 Cloudflare-enabled deployment" \
          -m "- DNS: ${{ env.SUBDOMAIN }}.${{ env.DOMAIN }}" \
          -m "- Tunnel: Enabled" \
          -m "- Environment: ${{ github.event.inputs.environment }}" \
          -m "- Actor: ${{ github.actor }}"
        
        # Push to trigger ArgoCD
        git push origin HEAD:${{ github.ref_name }}
        
    - name: ⏳ Step 4: Wait for Deployment
      run: |
        echo "⏳ Waiting for ArgoCD sync..."
        sleep 180  # 3 minutes
        
    - name: 🌐 Step 5: Verify DNS Propagation
      run: |
        echo "🌐 Checking DNS propagation..."
        
        MAX_ATTEMPTS=30
        ATTEMPT=0
        DNS_READY=false
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          if dig +short ${{ env.SUBDOMAIN }}.${{ env.DOMAIN }} @1.1.1.1 | grep -q "\."; then
            echo "✅ DNS is propagated"
            DNS_READY=true
            break
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          echo "⏳ Waiting for DNS... ($ATTEMPT/$MAX_ATTEMPTS)"
          sleep 10
        done
        
        if [ "$DNS_READY" = false ]; then
          echo "⚠️ DNS propagation timeout"
        fi
        
    - name: 🏥 Step 6: Health Check
      id: health
      run: |
        echo "🏥 Running health checks..."
        
        CLOUDFLARE_URL="https://${{ env.SUBDOMAIN }}.${{ env.DOMAIN }}/api/health"
        SUCCESS=false
        
        # Try Cloudflare URL
        echo "Testing Cloudflare URL: $CLOUDFLARE_URL"
        for i in {1..5}; do
          if curl -f -s -m 15 "$CLOUDFLARE_URL" > /dev/null 2>&1; then
            echo "✅ Cloudflare tunnel is working!"
            SUCCESS=true
            
            # Get detailed health
            HEALTH_RESPONSE=$(curl -s "$CLOUDFLARE_URL")
            echo "Health Response: $HEALTH_RESPONSE"
            break
          else
            echo "❌ Attempt $i/5 failed"
            sleep 15
          fi
        done
        
        if [ "$SUCCESS" = true ]; then
          echo "::set-output name=status::success"
          echo "::set-output name=url::$CLOUDFLARE_URL"
        else
          echo "::set-output name=status::failed"
          exit 1
        fi
        
    - name: 📊 Summary
      if: always()
      run: |
        echo "## 🌐 Cloudflare Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Domain**: ${{ env.SUBDOMAIN }}.${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **DNS Action**: ${{ github.event.inputs.dns_action }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.health.outputs.status }}" = "success" ]; then
          echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.health.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Healthy" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Resources" >> $GITHUB_STEP_SUMMARY
        echo "- [Application](https://${{ env.SUBDOMAIN }}.${{ env.DOMAIN }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Cloudflare Dashboard](https://dash.cloudflare.com)" >> $GITHUB_STEP_SUMMARY
        echo "- [ArgoCD](https://argo.jclee.me/applications/fortinet)" >> $GITHUB_STEP_SUMMARY