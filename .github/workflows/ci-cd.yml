name: CI/CD Pipeline - FortiGate Nextrade

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY || 'registry.jclee.me' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'fortinet' }}
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}

jobs:
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        pip install pytest pytest-cov flake8 black isort mypy
        
    - name: 🔍 Code Quality Checks
      run: |
        echo "🔍 Running code quality checks..."
        
        # Code formatting check (non-blocking)
        black --check src/ || echo "❌ Black formatting issues found"
        
        # Import sorting check (non-blocking)
        isort --check-only src/ || echo "❌ Import sorting issues found"
        
        # Linting (non-blocking)
        flake8 src/ --max-line-length=120 --ignore=E203,W503 || echo "❌ Flake8 issues found"
        
        # Type checking (non-blocking)
        mypy src/ --ignore-missing-imports || echo "⚠️ Type checking issues found"
        
    - name: 🧪 Run Tests
      run: |
        echo "🧪 Running test suite..."
        cd src
        python -m pytest ../tests/ --cov=. --cov-report=xml --cov-report=html -v || echo "⚠️ Some tests failed"

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Security Scan
      run: |
        echo "🔒 Running security scans..."
        
        # Install security tools
        pip install safety bandit || echo "Security tools installation failed"
        
        # Check for known vulnerabilities (non-blocking)
        safety check || echo "⚠️ Security vulnerabilities found"
        
        # Code security analysis (non-blocking)
        bandit -r src/ || echo "⚠️ Security issues found"
        
        # Check for hardcoded secrets
        echo "🔍 Checking for hardcoded secrets..."
        if grep -r -i "password\|secret\|key" src/ --include="*.py" | grep -v "getenv\|environ\|example\|template"; then
          echo "⚠️ Potential hardcoded secrets found"
        else
          echo "✅ No hardcoded secrets found"
        fi

  build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          
    - name: 🔐 Log in to Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: 🚀 Build and Push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          VERSION=${{ steps.meta.outputs.version }}
          
    - name: 🎯 Deployment Ready
      if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      run: |
        echo "🚀 Docker image built and pushed successfully!"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "📦 SHA: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo ""
        echo "🔄 Image ready for deployment..."
        echo "Registry: ${{ env.REGISTRY }}"
        echo ""
        echo "✅ CI/CD Build completed successfully!"