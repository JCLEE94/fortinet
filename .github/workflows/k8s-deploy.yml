name: K8s Deployment Pipeline - FortiGate Nextrade

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ${{ vars.DOCKER_REGISTRY || 'registry.jclee.me' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'fortinet' }}
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  K8S_NAMESPACE: fortinet
  K8S_CLUSTER: ${{ vars.K8S_CLUSTER || 'production' }}

jobs:
  test:
    name: üß™ Tests & Code Quality
    runs-on: self-hosted
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: üì¶ Install dependencies
      run: |
        # Force reinstall pip
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py --force-reinstall
        rm get-pip.py
        
        # Upgrade pip and setuptools
        python -m pip install --upgrade pip setuptools wheel
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        pip install pytest pytest-cov flake8 black isort mypy
        
    - name: üîç Code Quality Checks
      run: |
        echo "üîç Running code quality checks..."
        
        # Code formatting check (non-blocking)
        black --check src/ || echo "‚ùå Black formatting issues found"
        
        # Import sorting check (non-blocking)
        isort --check-only src/ || echo "‚ùå Import sorting issues found"
        
        # Linting (non-blocking)
        flake8 src/ --max-line-length=120 --ignore=E203,W503 || echo "‚ùå Flake8 issues found"
        
        # Type checking (non-blocking)
        mypy src/ --ignore-missing-imports || echo "‚ö†Ô∏è Type checking issues found"
        
    - name: üß™ Run Tests
      run: |
        echo "üß™ Running test suite..."
        cd src
        python -m pytest ../tests/ --cov=. --cov-report=xml --cov-report=html -v || echo "‚ö†Ô∏è Some tests failed"

  security:
    name: üîí Security Scan
    runs-on: self-hosted
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîí Run Security Scan
      run: |
        echo "üîí Running security scans..."
        
        # Install security tools
        pip install safety bandit || echo "Security tools installation failed"
        
        # Check for known vulnerabilities (non-blocking)
        safety check || echo "‚ö†Ô∏è Security vulnerabilities found"
        
        # Code security analysis (non-blocking)
        bandit -r src/ || echo "‚ö†Ô∏è Security issues found"
        
        # Check for hardcoded secrets
        echo "üîç Checking for hardcoded secrets..."
        if grep -r -i "password\|secret\|key" src/ --include="*.py" | grep -v "getenv\|environ\|example\|template"; then
          echo "‚ö†Ô∏è Potential hardcoded secrets found"
        else
          echo "‚úÖ No hardcoded secrets found"
        fi

  build:
    name: üê≥ Build & Push Docker Image
    runs-on: self-hosted
    needs: [test, security]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üè∑Ô∏è Generate metadata
      id: meta
      run: |
        # Generate version tag
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        else
          VERSION=sha-${GITHUB_SHA::8}
        fi
        
        # Set build metadata
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
    - name: üîê Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        
    - name: üîê Log in to Private Registry
      run: |
        echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
        
    - name: üöÄ Build and Push
      id: build
      run: |
        # Build image
        docker build -f Dockerfile.production \
          --build-arg BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --build-arg GIT_BRANCH=${{ github.ref_name }} \
          --build-arg VERSION=${{ steps.meta.outputs.version }} \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
          .
        
        # Push images
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        
        # Get image digest
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} | cut -d'@' -f2)
        echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
        
    - name: üìã Image Scan
      run: |
        echo "üîç Scanning image for vulnerabilities..."
        # Using trivy for container scanning
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image --exit-code 0 --no-progress \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} || echo "‚ö†Ô∏è Vulnerabilities found"

  deploy-k8s:
    name: üöÄ Deploy to Kubernetes
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Setup kubectl
      run: |
        # Install kubectl if not present
        if ! command -v kubectl &> /dev/null; then
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
        fi
        
        # Verify kubectl
        kubectl version --client
    
    - name: üîê Configure kubeconfig
      run: |
        # Setup kubeconfig from secret
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
        # Test connection
        kubectl cluster-info
        kubectl get nodes
    
    - name: üöÄ Deploy with Kustomize
      run: |
        echo "üöÄ Deploying to Kubernetes..."
        
        # Update image tag in kustomization
        cd k8s
        kubectl kustomize edit set image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Set build metadata
        export BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        export GIT_COMMIT=${{ github.sha }}
        export GIT_BRANCH=${{ github.ref_name }}
        export VERSION=${{ needs.build.outputs.image-tag }}
        
        # Apply manifests
        kubectl apply -k . --dry-run=client -o yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/fortinet -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
    - name: ‚úÖ Verify Deployment
      run: |
        echo "‚úÖ Verifying deployment..."
        
        # Check pod status
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=fortinet
        
        # Check service endpoints
        kubectl get svc -n ${{ env.K8S_NAMESPACE }}
        
        # Check ingress
        kubectl get ingress -n ${{ env.K8S_NAMESPACE }}
        
        # Get deployment info
        kubectl describe deployment fortinet -n ${{ env.K8S_NAMESPACE }}
        
    - name: üè• Health Check
      run: |
        echo "üè• Running health checks..."
        
        # Wait for pods to be ready
        sleep 30
        
        # Check internal service health
        POD_NAME=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=fortinet -o jsonpath='{.items[0].metadata.name}')
        kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD_NAME -- curl -s http://localhost:7777/api/health || echo "‚ö†Ô∏è Internal health check failed"
        
        # Check external endpoint
        for i in {1..10}; do
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://fortinet.jclee.me/api/health || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ External health check passed!"
            
            # Get detailed health info
            HEALTH=$(curl -s https://fortinet.jclee.me/api/health)
            echo "Health Response: $HEALTH"
            
            # Verify deployed version
            DEPLOYED_SHA=$(echo "$HEALTH" | grep -o '"git_commit":"[^"]*"' | cut -d'"' -f4 || echo "unknown")
            if [ "$DEPLOYED_SHA" = "${{ github.sha }}" ]; then
              echo "‚úÖ Correct version deployed: $DEPLOYED_SHA"
            else
              echo "‚ö†Ô∏è Version mismatch - Expected: ${{ github.sha }}, Found: $DEPLOYED_SHA"
            fi
            
            break
          else
            echo "‚è≥ Health check attempt $i failed (HTTP $HTTP_CODE), retrying in 10s..."
            sleep 10
          fi
        done
        
    - name: üìä Deployment Summary
      if: always()
      run: |
        echo "üìä Kubernetes Deployment Summary"
        echo "================================"
        echo "üè∑Ô∏è Version: ${{ github.sha }}"
        echo "üì¶ Image: ${{ needs.build.outputs.image-tag }}"
        echo "üåê URL: https://fortinet.jclee.me"
        echo "‚ò∏Ô∏è Namespace: ${{ env.K8S_NAMESPACE }}"
        echo "üìÖ Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo ""
        
        # Get pod status
        echo "üì¶ Pod Status:"
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=fortinet
        echo ""
        
        # Get HPA status
        echo "üìà HPA Status:"
        kubectl get hpa -n ${{ env.K8S_NAMESPACE }}
        echo ""
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Kubernetes deployment completed successfully!"
        else
          echo "‚ùå Kubernetes deployment failed!"
          
          # Get error logs
          echo "üìã Recent pod logs:"
          kubectl logs -n ${{ env.K8S_NAMESPACE }} -l app=fortinet --tail=50
        fi

  rollback:
    name: üîÑ Rollback on Failure
    runs-on: self-hosted
    needs: [deploy-k8s]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: üîÑ Rollback Deployment
      run: |
        echo "üîÑ Rolling back deployment..."
        
        # Setup kubeconfig
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
        # Rollback to previous version
        kubectl rollout undo deployment/fortinet -n ${{ env.K8S_NAMESPACE }}
        
        # Wait for rollback
        kubectl rollout status deployment/fortinet -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
        echo "‚úÖ Rollback completed"
        
        # Verify rollback
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=fortinet
        kubectl describe deployment fortinet -n ${{ env.K8S_NAMESPACE }}