name: Simple Deploy - FortiGate Nextrade

on:
  push:
    branches: [ main, master, develop ]

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: fortinet

jobs:
  build-and-deploy:
    name: 🚀 Build and Deploy
    runs-on: self-hosted
    
    steps:
    - name: 📥 Checkout code
      run: |
        # Clean workspace
        rm -rf *
        rm -rf .*
        
        # Clone repository
        git clone https://github.com/JCLEE94/fortinet.git .
        git checkout ${{ github.sha }}
        
        echo "✅ Repository cloned successfully"
        
    - name: 🐳 Build Docker Image
      run: |
        echo "🐳 Building Docker image..."
        
        # Build with legacy builder to avoid BuildKit issues
        export DOCKER_BUILDKIT=0
        
        docker build -f Dockerfile.production \
          --build-arg BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --build-arg GIT_BRANCH=${{ github.ref_name }} \
          --build-arg VERSION=${{ github.ref_name }}-${{ github.sha }} \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          .
        
        echo "✅ Docker image built successfully"
        
    - name: 🚀 Push to Registry
      run: |
        echo "🚀 Pushing to registry..."
        
        # Login to registry (use existing credentials from environment)
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        echo "✅ Images pushed to registry"
        
    - name: ☸️ Deploy to Kubernetes
      run: |
        echo "☸️ Deploying to Kubernetes..."
        
        # Navigate to k8s directory
        cd k8s
        
        # Update image tag in kustomization
        sed -i "s/newTag: .*/newTag: ${{ github.sha }}/" kustomization.yaml
        
        # Apply to cluster
        kubectl apply -k . || echo "⚠️ Some resources may have validation warnings"
        
        # Restore kustomization file
        sed -i "s/newTag: .*/newTag: latest/" kustomization.yaml
        
        echo "✅ Deployment applied"
        
    - name: 🏥 Health Check
      run: |
        echo "🏥 Waiting for deployment..."
        
        # Wait for rollout
        kubectl rollout status deployment/fortinet -n fortinet --timeout=300s || {
          echo "⚠️ Rollout may be slow, checking pod status..."
          kubectl get pods -n fortinet -l app=fortinet
        }
        
        # Health check with retry
        for i in {1..10}; do
          sleep 30
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://fortinet.jclee.me/api/health || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Health check passed! Application is running."
            
            # Verify deployed version
            HEALTH=$(curl -s https://fortinet.jclee.me/api/health || echo "{}")
            echo "📊 Health Response: $HEALTH"
            
            exit 0
          else
            echo "⏳ Attempt $i: Health check failed (HTTP $HTTP_CODE), retrying..."
          fi
        done
        
        echo "❌ Health check failed after 10 attempts"
        kubectl get pods -n fortinet -l app=fortinet
        exit 1
        
    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "📊 Deployment Summary"
        echo "===================="
        echo "🏷️ Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "🌐 URL: https://fortinet.jclee.me"
        echo "📅 Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo ""
        
        # Show current pods
        echo "📦 Current Pods:"
        kubectl get pods -n fortinet -l app=fortinet
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment completed successfully!"
        else
          echo "❌ Deployment failed!"
        fi