name: GitOps CI/CD Pipeline

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
    
env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: fortinet
  APP_NAME: fortinet
  NAMESPACE: fortinet
  
jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 safety bandit
          
      - name: Run tests
        run: |
          # Run unit tests
          pytest tests/unit -v --tb=short || echo "‚ö†Ô∏è Unit tests failed"
          
          # Run linting
          flake8 src/ --max-line-length=120 --ignore=E203,W503 || echo "‚ö†Ô∏è Linting issues found"
          
          # Security checks
          safety check --ignore=70612 || echo "‚ö†Ô∏è Security vulnerabilities found"
          bandit -r src/ -ll || echo "‚ö†Ô∏è Security issues found"
          
  build:
    needs: test
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
      chart-version: ${{ steps.chart.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            BUILD_VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BUILD_REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            
      - name: Generate chart version
        id: chart
        run: |
          CHART_VERSION="1.0.$(date +%Y%m%d%H%M%S)"
          echo "version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          
  helm-deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.14.0'
          
      - name: Update chart values
        run: |
          # Update Chart version
          sed -i "s/^version:.*/version: ${{ needs.build.outputs.chart-version }}/" ./charts/${{ env.APP_NAME }}/Chart.yaml
          
          # Update image tag in values.yaml
          sed -i "s/tag:.*/tag: \"${{ needs.build.outputs.image-tag }}\"/" ./charts/${{ env.APP_NAME }}/values.yaml
          
          # Display changes
          echo "üìã Updated Chart.yaml:"
          grep -E "^(version|appVersion):" ./charts/${{ env.APP_NAME }}/Chart.yaml
          
          echo "üìã Updated values.yaml:"
          grep -E "tag:" ./charts/${{ env.APP_NAME }}/values.yaml
          
      - name: Package Helm chart
        run: |
          helm package ./charts/${{ env.APP_NAME }} --destination ./
          
      - name: Upload to ChartMuseum
        run: |
          set -euo pipefail
          
          CHART_FILE="${{ env.APP_NAME }}-${{ needs.build.outputs.chart-version }}.tgz"
          
          echo "üì¶ Uploading ${CHART_FILE} to ChartMuseum..."
          
          # Upload with curl
          HTTP_CODE=$(curl -w "%{http_code}" -s -o /tmp/upload_response.txt \
            -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            --data-binary "@${CHART_FILE}" \
            ${{ secrets.CHARTMUSEUM_URL }}/api/charts)
          
          echo "HTTP Response Code: ${HTTP_CODE}"
          cat /tmp/upload_response.txt || true
          
          if [ "${HTTP_CODE}" = "201" ] || [ "${HTTP_CODE}" = "409" ]; then
            echo "‚úÖ Chart uploaded successfully"
          else
            echo "‚ùå Chart upload failed (HTTP ${HTTP_CODE})"
            exit 1
          fi
          
      - name: Verify deployment
        run: |
          echo "üîç Verifying chart in ChartMuseum..."
          curl -s -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            ${{ secrets.CHARTMUSEUM_URL }}/api/charts/${{ env.APP_NAME }} | \
            grep -q "${{ needs.build.outputs.chart-version }}" && \
            echo "‚úÖ Chart verified in ChartMuseum" || \
            echo "‚ö†Ô∏è Chart verification failed"
            
          echo ""
          echo "üìä Deployment Summary:"
          echo "  - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.image-tag }}"
          echo "  - Chart: ${{ env.APP_NAME }}-${{ needs.build.outputs.chart-version }}"
          echo "  - Namespace: ${{ env.NAMESPACE }}"
          echo ""
          echo "üéØ Next Steps:"
          echo "  1. ArgoCD will automatically sync the new chart"
          echo "  2. Monitor the deployment at https://argo.jclee.me"
          echo "  3. Access the application at http://fortinet.jclee.me:30777"