# FortiGate Nextrade - GitLab CI/CD Pipeline
# CLAUDE.md v8.7.0 compliant pipeline configuration

variables:
  CI: 'true'
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  DOCKER_IMAGE_NAME: "fortinet"
  DOCKER_IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  REGISTRY_URL: "192.168.50.215:1234"
  
  # CLAUDE.md v8.7.0: Deployment configuration
  DEPLOY_HOST: "192.168.50.215"
  DEPLOY_PORT: "1111"
  DEPLOY_USER: "docker"
  DEPLOY_PATH: "~/app/fortinet"

stages:
  - build
  - test
  - deploy
  - monitor

# Build Stage - Docker 이미지 빌드
build:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
  script:
    - echo "Building Docker image with CLAUDE.md v8.7.0 compliance..."
    - docker build --pull -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
    - docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:latest
    
    # Test the built image health check
    - echo "Testing Docker image health check"
    - docker run --rm --name test-container -d -p 7778:7777 -e NODE_ENV=production $DOCKER_IMAGE_NAME:latest
    - sleep 30
    - docker exec test-container python3 -c "import urllib.request; urllib.request.urlopen('http://localhost:7777/api/health', timeout=10).read()"
    - docker stop test-container
    
    # Push to registry
    - docker tag $DOCKER_IMAGE_NAME:latest $REGISTRY_URL/$DOCKER_IMAGE_NAME:latest
    - docker push $REGISTRY_URL/$DOCKER_IMAGE_NAME:latest
    
    - echo "Build and registry push completed successfully"
  artifacts:
    reports:
      junit: build-report.xml
    expire_in: 1 hour
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
  only:
    - offline-deployment
    - main
    - master

# Test Stage - 엔드포인트 테스트
test:
  stage: test
  image: python:3.9-slim
  before_script:
    - apt-get update -qq && apt-get install -y -qq git curl docker.io
    - pip install --upgrade pip
    - pip install requests
  script:
    - echo "Starting application container for testing..."
    - docker run -d --name test-container -p 7777:7777 $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - sleep 30  # Wait for application to start
    - echo "Running endpoint tests..."
    - python test_all_endpoints.py
    - echo "All tests passed successfully"
  after_script:
    - docker stop test-container || true
    - docker rm test-container || true
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - api_test_report.json
    expire_in: 1 week
  dependencies:
    - build
  retry:
    max: 2
    when:
      - script_failure
  only:
    - offline-deployment
    - main
    - master

# Deploy Stage - 운영 서버 배포 (완전 자율적)
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client curl docker
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$DEPLOY_HOST" > ~/.ssh/known_hosts
  script:
    # Copy deployment files to production server
    - scp -P $DEPLOY_PORT docker-compose.yml $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
    - scp -P $DEPLOY_PORT .env $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/
    
    # CLAUDE.md v8.7.0: Force deployment with port conflict resolution
    - echo "🚀 CLAUDE.md v8.7.0 compliant deployment starting..."
    - |
      ssh -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
        cd $DEPLOY_PATH
        
        # Force port cleanup and container recreation (CLAUDE.md v8.7.0)
        echo "🔄 Force cleaning existing containers on configured port..."
        docker ps --filter 'publish=$PRD_PORT' -q | xargs -r docker kill || true
        docker ps -a --filter 'publish=$PRD_PORT' -q | xargs -r docker rm -f || true
        docker ps --filter 'name=fortinet-app' -q | xargs -r docker kill || true
        docker ps -a --filter 'name=fortinet-app' -q | xargs -r docker rm -f || true
        docker network prune -f || true
        
        # Stop existing compose services
        echo "📦 Stopping existing compose services..."
        docker-compose down --remove-orphans || true
        
        # Pull latest images from registry
        echo "📥 Pulling latest images from registry..."
        docker-compose pull
        
        # Deploy new version with force recreate
        echo "🚀 Deploying new version with force recreate..."
        docker-compose up -d --force-recreate
        
        # Wait for services to be ready
        echo "⏳ Waiting for services to be ready..."
        sleep 60
        
        # Health check verification
        echo "🩺 Running health check verification..."
        if curl -f -s "http://localhost:${PRD_PORT:-7777}/api/health" | grep -q "healthy"; then
          echo "✅ Deployment successful - Service is healthy"
          # Cleanup old images
          docker image prune -f || true
        else
          echo "❌ Health check failed - Deployment unsuccessful"
          exit 1
        fi
      ENDSSH
    - echo "✅ CLAUDE.md v8.7.0 compliant deployment completed"
  environment:
    name: production
    url: http://$DEPLOY_HOST:7777
  dependencies:
    - test
  retry:
    max: 1
    when:
      - script_failure
  only:
    - offline-deployment
    - main
    - master
  when: manual  # 운영 배포는 수동 승인 필요

# Monitor Stage - 배포 후 자동 모니터링
monitor:
  stage: monitor
  image: python:3.9-slim
  before_script:
    - pip install requests
  script:
    - echo "📊 배포 후 자동 모니터링 시작..."
    - python scripts/monitor_deployment.py || echo "모니터링 스크립트 실행 (스크립트가 없으면 기본 체크)"
    - |
      # 기본 모니터링 (스크립트가 없는 경우)
      for i in {1..10}; do
        if curl -f http://$DEPLOY_HOST:7777/api/settings; then
          echo "✅ 모니터링 $i: 서비스 정상"
        else
          echo "⚠️ 모니터링 $i: 서비스 이상 감지"
        fi
        sleep 30
      done
    - echo "📊 모니터링 완료 - 모든 시스템 정상 운영 중"
  dependencies:
    - deploy
  allow_failure: true
  only:
    - offline-deployment
    - main
    - master

# 실패 시 자동 정리 작업
cleanup_on_failure:
  stage: .post
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
  script:
    - echo "🧹 파이프라인 실패 - 자동 정리 작업 실행..."
    - |
      ssh -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
        cd $DEPLOY_PATH/fortinet || true
        echo "실패한 배포 아티팩트 정리 중..."
        docker system prune -f || true
        echo "정리 작업 완료"
      ENDSSH
  when: on_failure
  allow_failure: true
  only:
    - offline-deployment
    - main
    - master