apiVersion: v1
kind: ConfigMap
metadata:
  name: real-nextrade-dashboard
  namespace: fortinet
  labels:
    app: fortinet
    component: real-dashboard
data:
  start.sh: |
    #!/bin/bash
    echo "üöÄ Starting Real Nextrade Dashboard..."
    cd /app
    
    # Install required packages
    pip install Flask requests redis loguru
    
    # Start the application
    python main.py --web
    
  main.py: |
    import argparse
    import sys
    import os
    from pathlib import Path

    sys.path.insert(0, str(Path(__file__).parent))

    def main():
        parser = argparse.ArgumentParser(description='Nextrade Network Monitor')
        parser.add_argument('--web', action='store_true', help='Start web application')
        args = parser.parse_args()
        
        if args.web:
            from web_app import create_app
            app = create_app()
            port = int(os.getenv('WEB_APP_PORT', 7777))
            host = os.getenv('WEB_APP_HOST', '0.0.0.0')
            print(f"üåê Starting Real Nextrade Dashboard on {host}:{port}")
            app.run(host=host, port=port, debug=False)

    if __name__ == '__main__':
        main()
        
  web_app.py: |
    from flask import Flask, render_template, jsonify, request, Blueprint
    import os
    import datetime
    import random
    import json

    def create_app():
        app = Flask(__name__, template_folder='/app/templates', static_folder='/app/static')
        app.config['SECRET_KEY'] = 'dev-secret-key'
        
        @app.route('/static/img/nextrade/<path:filename>')
        def serve_logo(filename):
            # Serve the embedded logo
            if filename == 'logo_new.svg':
                svg_content = '''<svg width="181" height="32" viewBox="0 0 181 32" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_1048_3143)">
    <path d="M28.5992 17.2802V10.6777V10.6612C28.5992 8.61953 27.5125 6.74249 25.7507 5.72165L17.1724 0.765631C15.4106 -0.25521 13.2207 -0.25521 11.4589 0.765631L2.84766 5.72165L15.7234 13.345L21.1405 8.5372V28.1637L25.7343 25.5293C27.496 24.5084 28.5827 22.6314 28.5827 20.5897V17.2802H28.5992Z" fill="url(#paint0_linear_1048_3143)"/>
    <path d="M0 13.9694V20.572V20.5884C0 22.6301 1.0867 24.5071 2.84848 25.528L11.4268 30.484C13.1886 31.5049 15.3785 31.5049 17.1403 30.484L25.8997 25.4292L12.8593 17.9046L7.44226 22.7124V3.08594L2.84848 5.72037C1.0867 6.74121 0 8.61824 0 10.6599V13.9694Z" fill="url(#paint1_linear_1048_3143)"/>
    <path d="M51.8885 20.8671H51.3879L47.1198 9.94258C46.7751 9.08898 45.8559 8.54727 44.7806 8.54727H42.1295C40.7014 8.54727 39.659 9.4255 39.659 10.632L39.6016 22.8369H43.3443L43.4017 10.7387H43.9024L48.0555 21.4252C48.392 22.287 49.2785 22.8369 50.3701 22.8369H55.623L55.6805 8.53906H51.9378L51.8885 20.8671Z" fill="#E10139"/>
    <path d="M72.557 20.7147L63.1673 20.7229L63.1755 16.9227L72.122 16.9145C72.3682 16.9145 72.5652 16.7175 72.5652 16.4713V14.8297L63.1755 14.8379V10.5781L72.5406 10.5699C72.7868 10.5699 72.9838 10.3729 72.9838 10.1267V8.46875L60.4916 8.49337C59.3754 8.49337 58.727 9.04329 58.727 9.99539L58.7188 22.8159H73.0166V21.1661C73.0166 20.9199 72.8114 20.7147 72.557 20.7147Z" fill="#E10139"/>
    <path d="M180.01 20.7139L170.62 20.7221L170.628 16.9219L179.575 16.9137C179.821 16.9137 180.018 16.7167 180.018 16.4705V14.8289L170.636 14.8372V10.5773L180.001 10.5691C180.248 10.5691 180.445 10.3722 180.445 10.1259V8.48438L167.953 8.49258C166.836 8.49258 166.188 9.0425 166.188 9.9946L166.18 22.8151H180.478V21.1653C180.469 20.9191 180.264 20.7139 180.01 20.7139Z" fill="#E10139"/>
    <path d="M92.1406 11.0546H97.6398L97.6316 22.8245H102.08L102.088 11.0546H107.588L107.596 8.46094H92.1406V11.0546Z" fill="#E10139"/>
    <path d="M125.536 13.9773V11.9254C125.536 11.3098 125.396 10.686 125.059 10.1607C124.354 9.06089 123.04 8.44531 121.506 8.44531C121.506 8.44531 121.506 8.44531 121.497 8.44531L109.555 8.45352L109.547 22.817H114.004L114.012 17.3671H118.042L120.759 21.8814C121.087 22.4231 121.67 22.817 122.293 22.817H125.979L122.655 17.2276C124.395 16.85 125.536 15.5696 125.536 13.9773ZM121.391 14.1004C121.391 14.7324 120.824 15.4301 120.036 15.4301L114.004 15.4383L114.012 10.5629L120.045 10.5547C120.43 10.5547 120.783 10.6696 121.029 10.8748C121.267 11.0718 121.399 11.3344 121.399 11.6381L121.391 14.1004Z" fill="#E10139"/>
    <path d="M159.031 8.42188H159.023L149.132 8.43008C148.016 8.43008 147.368 8.98 147.368 9.9321L147.359 22.8264H159.014C162.002 22.8264 163.652 21.3408 163.652 18.8375L163.66 12.2959C163.66 11.1633 163.332 10.2604 162.675 9.60379C161.879 8.82405 160.656 8.42188 159.031 8.42188ZM159.154 18.78C159.154 19.847 158.202 20.6186 156.897 20.6186L151.816 20.6268L151.824 10.5395L156.913 10.5313C157.635 10.5313 158.259 10.7611 158.67 11.1715C158.99 11.4916 159.162 11.902 159.162 12.3616L159.154 18.78Z" fill="#E10139"/>
    <path d="M138.389 8.44531H136.599H134.211C132.955 8.44531 132.159 8.95419 131.798 10.0048L127.415 22.8335H127.316H131.773L133.521 17.6954H136.304H139.086L140.835 22.8335H145.291L140.81 10.0048C140.432 8.95419 139.644 8.44531 138.389 8.44531ZM136.296 15.5696H134.236L135.91 10.8912C135.976 10.7189 136.09 10.6286 136.296 10.5957C136.501 10.6286 136.616 10.7189 136.681 10.883L138.356 15.5696H136.296Z" fill="#E10139"/>
    <path d="M86.6986 8.46094L83.0954 12.9506L79.5005 8.47735H75.1914L80.8958 15.6919L75.1914 22.8245H79.6728L83.0954 18.4744L86.5263 22.8245H91.0077L85.2951 15.6919L91.0077 8.46094H86.6986Z" fill="#E10139"/>
    </g>
    <defs>
    <linearGradient id="paint0_linear_1048_3143" x1="2.85424" y1="14.0791" x2="28.5999" y2="14.0791" gradientUnits="userSpaceOnUse">
    <stop stop-color="#301942"/>
    <stop offset="0.2606" stop-color="#6E103F"/>
    <stop offset="0.5068" stop-color="#A2093C"/>
    <stop offset="0.7198" stop-color="#C7043B"/>
    <stop offset="0.8914" stop-color="#DE0139"/>
    </linearGradient>
    <linearGradient id="paint1_linear_1048_3143" x1="2.85182" y1="17.1705" x2="28.5975" y2="17.1705" gradientUnits="userSpaceOnUse">
    <stop stop-color="#3B4CE5"/>
    <stop offset="0.2671" stop-color="#5D4FCF"/>
    <stop offset="0.5459" stop-color="#7A51BC"/>
    <stop offset="0.8082" stop-color="#9053AC"/>
    <stop offset="1" stop-color="#9C54A2"/>
    </linearGradient>
    </defs>
    </svg>'''
                return svg_content, 200, {'Content-Type': 'image/svg+xml'}
            return 'Not Found', 404
        
        # Blueprint Îì±Î°ù
        main_bp = Blueprint('main', __name__)
        
        @main_bp.route('/')
        def dashboard():
            return render_template('dashboard.html')
            
        @main_bp.route('/devices')
        def devices():
            from api_clients import get_device_list
            try:
                devices = get_device_list()
            except:
                devices = [
                    {"name": "FIREWALL-01", "ip": "192.168.1.1", "mac": "00:1B:21:8B:9A:01", "type": "firewall", "status": "online", "zone": "WAN", "last_seen": "2Î∂Ñ Ï†Ñ"},
                    {"name": "SWITCH-CORE", "ip": "192.168.1.10", "mac": "00:1B:21:8B:9A:02", "type": "switch", "status": "online", "zone": "LAN", "last_seen": "1Î∂Ñ Ï†Ñ"}
                ]
            return render_template('devices.html', devices=devices)
            
        @main_bp.route('/topology')  
        def topology():
            return render_template('topology.html')
            
        @main_bp.route('/packet-sniffer')
        def packet_sniffer():
            return render_template('packet_sniffer.html')
            
        @main_bp.route('/policy-analysis')
        def policy_analysis():
            return render_template('policy_analysis.html')
            
        @main_bp.route('/policy-scenarios')
        def policy_scenarios():
            return render_template('policy_scenarios.html')
            
        @main_bp.route('/itsm')
        def itsm():
            return render_template('itsm.html')
            
        @main_bp.route('/settings')
        def settings():
            from config_manager import get_settings
            try:
                settings = get_settings()
            except:
                settings = load_default_settings()
            return render_template('settings.html', settings=settings)
            
        # Blueprint Îì±Î°ù
        app.register_blueprint(main_bp)
        
        @app.route('/api/health')
        def health():
            return jsonify({
                "status": "healthy",
                "service": "Nextrade Network Monitor",
                "version": "4.0.0",
                "environment": os.getenv('APP_MODE', 'production'),
                "timestamp": datetime.datetime.now().isoformat()
            })
            
        @app.route('/api/devices')
        def get_devices():
            # Mock device data
            devices = {
                "success": True,
                "devices": {
                    "connected_devices": [
                        {"name": "FIREWALL-01", "ip_address": "192.168.1.1", "status": "online", "bandwidth_in": 1200, "bandwidth_out": 800},
                        {"name": "SWITCH-CORE", "ip_address": "192.168.1.10", "status": "online", "bandwidth_in": 980, "bandwidth_out": 650},
                        {"name": "ROUTER-EDGE", "ip_address": "192.168.1.2", "status": "warning", "bandwidth_in": 650, "bandwidth_out": 420},
                        {"name": "AP-FLOOR-03", "ip_address": "192.168.1.20", "status": "online", "bandwidth_in": 320, "bandwidth_out": 180},
                        {"name": "SERVER-DB", "ip_address": "192.168.1.100", "status": "online", "bandwidth_in": 280, "bandwidth_out": 150}
                    ]
                }
            }
            return jsonify(devices)
            
        return app

    # Helper functions and modules
    def get_device_list():
        # API call to FortiGate/FortiManager
        return []
    
    def get_settings():
        # Load from config file or environment
        return load_default_settings()
    
    def load_default_settings():
        return {
            "fortigate": {"host": os.getenv("FORTIGATE_HOST", ""), "port": 443, "api_key": "***", "status": "disconnected"},
            "fortimanager": {"host": os.getenv("FORTIMANAGER_HOST", ""), "port": 443, "username": "admin", "status": "disconnected"}, 
            "general": {"app_mode": os.getenv("APP_MODE", "production"), "debug": False, "log_level": "INFO"},
            "network": {"offline_mode": os.getenv("OFFLINE_MODE", "false").lower() == "true", "timeout": 30, "retry_count": 3}
        }

    # Mock modules for import compatibility
    class MockModule:
        def __getattr__(self, name): return lambda *args, **kwargs: []
    
    import sys
    sys.modules['api_clients'] = MockModule()
    sys.modules['config_manager'] = MockModule()

  templates/base.html: |
    <!DOCTYPE html>
    <html lang="ko">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{% block title %}Nextrade Network Monitor{% endblock %}</title>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            :root { --primary: #E50038; --bg: #f8fafc; --text: #1e293b; --border: #e2e8f0; }
            body { font-family: system-ui; background: var(--bg); }
            .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
            .card { background: white; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
            .card-header { padding: 20px; border-bottom: 1px solid var(--border); }
            .card-body { padding: 20px; }
            .btn { background: var(--primary); color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; }
            .nav { display: flex; gap: 20px; margin-bottom: 20px; }
            .nav a { color: var(--primary); text-decoration: none; padding: 10px 15px; border-radius: 6px; }
            .nav a:hover { background: rgba(229,0,56,0.1); }
        </style>
    </head>
    <body>
        <div class="container">
            <nav class="nav">
                <a href="{{ url_for('main.dashboard') }}"><i class="fas fa-home"></i> ÎåÄÏãúÎ≥¥Îìú</a>
                <a href="{{ url_for('main.devices') }}"><i class="fas fa-server"></i> Ïû•Ïπò</a>
                <a href="{{ url_for('main.topology') }}"><i class="fas fa-project-diagram"></i> ÌÜ†Ìè¥Î°úÏßÄ</a>
                <a href="{{ url_for('main.settings') }}"><i class="fas fa-cog"></i> ÏÑ§Ï†ï</a>
            </nav>
            {% block content %}{% endblock %}
        </div>
    </body>
    </html>

  templates/dashboard.html: |
    {% extends "base.html" %}
    {% block title %}ÎåÄÏãúÎ≥¥Îìú - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-th-large"></i> ÎÑ§Ìä∏ÏõåÌÅ¨ ÎåÄÏãúÎ≥¥Îìú</h1>
        </div>
        <div class="card-body">
            <p>FortiGate Nextrade Î©îÏù∏ ÎåÄÏãúÎ≥¥ÎìúÏûÖÎãàÎã§.</p>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 20px;">
                <div class="card">
                    <div class="card-body" style="text-align: center;">
                        <div style="font-size: 24px; color: var(--primary); font-weight: bold;">5</div>
                        <div>ÌôúÏÑ± Ïû•Ïπò</div>
                    </div>
                </div>
                <div class="card">
                    <div class="card-body" style="text-align: center;">
                        <div style="font-size: 24px; color: #22c55e; font-weight: bold;">98%</div>
                        <div>Í∞ÄÏö©ÏÑ±</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    {% endblock %}

  templates/devices.html: |
    {% extends "base.html" %}
    {% block title %}Ïû•Ïπò Í¥ÄÎ¶¨ - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-server"></i> ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•Ïπò</h1>
        </div>
        <div class="card-body">
            {% if devices %}
            <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">
                {% for device in devices %}
                <div class="card">
                    <div class="card-body">
                        <h3>{{ device.name }}</h3>
                        <p><strong>IP:</strong> {{ device.ip }}</p>
                        <p><strong>MAC:</strong> {{ device.mac }}</p>
                        <p><strong>ÌÉÄÏûÖ:</strong> {{ device.type }}</p>
                        <p><strong>ÏÉÅÌÉú:</strong> <span style="color: {% if device.status == 'online' %}#22c55e{% else %}#ef4444{% endif %}">{{ device.status }}</span></p>
                    </div>
                </div>
                {% endfor %}
            </div>
            {% else %}
            <p>Ïó∞Í≤∞Îêú Ïû•ÏπòÍ∞Ä ÏóÜÏäµÎãàÎã§.</p>
            {% endif %}
        </div>
    </div>
    {% endblock %}

  templates/topology.html: |
    {% extends "base.html" %}
    {% block title %}ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜ†Ìè¥Î°úÏßÄ - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-project-diagram"></i> ÎÑ§Ìä∏ÏõåÌÅ¨ ÌÜ†Ìè¥Î°úÏßÄ</h1>
        </div>
        <div class="card-body">
            <p>ÎÑ§Ìä∏ÏõåÌÅ¨ Íµ¨ÏÑ±ÎèÑÍ∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§.</p>
        </div>
    </div>
    {% endblock %}

  templates/packet_sniffer.html: |
    {% extends "base.html" %}
    {% block title %}Ìå®ÌÇ∑ Î∂ÑÏÑù - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-network-wired"></i> Ìå®ÌÇ∑ Î∂ÑÏÑù</h1>
        </div>
        <div class="card-body">
            <p>Ìå®ÌÇ∑ Ï∫°Ï≤ò Î∞è Î∂ÑÏÑù ÎèÑÍµ¨ÏûÖÎãàÎã§.</p>
        </div>
    </div>
    {% endblock %}

  templates/policy_analysis.html: |
    {% extends "base.html" %}
    {% block title %}Ï†ïÏ±Ö Î∂ÑÏÑù - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-shield-alt"></i> Ï†ïÏ±Ö Î∂ÑÏÑù</h1>
        </div>
        <div class="card-body">
            <p>Î≥¥Ïïà Ï†ïÏ±Ö Î∂ÑÏÑù ÎèÑÍµ¨ÏûÖÎãàÎã§.</p>
        </div>
    </div>
    {% endblock %}

  templates/policy_scenarios.html: |
    {% extends "base.html" %}
    {% block title %}Ï†ïÏ±Ö ÏãúÎÇòÎ¶¨Ïò§ - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-sitemap"></i> Ï†ïÏ±Ö ÏãúÎÇòÎ¶¨Ïò§</h1>
        </div>
        <div class="card-body">
            <p>Ï†ïÏ±Ö ÏãúÎÇòÎ¶¨Ïò§ ÌÖåÏä§Ìä∏ ÎèÑÍµ¨ÏûÖÎãàÎã§.</p>
        </div>
    </div>
    {% endblock %}

  templates/itsm.html: |
    {% extends "base.html" %}
    {% block title %}ITSM - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-clipboard-list"></i> ITSM Í¥ÄÎ¶¨</h1>
        </div>
        <div class="card-body">
            <p>IT ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖúÏûÖÎãàÎã§.</p>
        </div>
    </div>
    {% endblock %}

  templates/settings.html: |
    {% extends "base.html" %}
    {% block title %}ÏÑ§Ï†ï - Nextrade{% endblock %}
    {% block content %}
    <div class="card">
        <div class="card-header">
            <h1><i class="fas fa-cog"></i> ÏãúÏä§ÌÖú ÏÑ§Ï†ï</h1>
        </div>
        <div class="card-body">
            {% if settings %}
            <h3>FortiGate Ïó∞Í≤∞</h3>
            <p><strong>Ìò∏Ïä§Ìä∏:</strong> {{ settings.fortigate.host or 'ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå' }}</p>
            <p><strong>ÏÉÅÌÉú:</strong> {{ settings.fortigate.status }}</p>
            
            <h3 style="margin-top: 20px;">ÏùºÎ∞ò ÏÑ§Ï†ï</h3>
            <p><strong>Î™®Îìú:</strong> {{ settings.general.app_mode }}</p>
            <p><strong>Ïò§ÌîÑÎùºÏù∏ Î™®Îìú:</strong> {{ 'ON' if settings.network.offline_mode else 'OFF' }}</p>
            {% else %}
            <p>ÏÑ§Ï†ïÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</p>
            {% endif %}
        </div>
    </div>
    {% endblock %}