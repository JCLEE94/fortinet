apiVersion: v1
kind: ConfigMap
metadata:
  name: fortinet-app-complete
  namespace: fortinet
  labels:
    app: fortinet
    component: nextrade-app
    version: "2.9.0"
data:
  # Main startup script
  start.sh: |
    #!/bin/bash
    echo "üöÄ Starting Nextrade FortiGate Network Monitor..."
    echo "üìç Mode: ${APP_MODE:-production}"
    echo "üåê Host: ${WEB_APP_HOST:-0.0.0.0}:${WEB_APP_PORT:-7777}"
    
    cd /app
    
    # Install dependencies
    echo "üì¶ Installing dependencies..."
    pip install Flask requests redis loguru python-socketio flask-socketio
    
    # Create directory structure
    echo "üìÅ Creating directory structure..."
    mkdir -p src/routes src/utils src/config src/api/integration src/mock
    mkdir -p src/templates src/static/css src/static/js src/static/img/nextrade
    mkdir -p data logs
    
    # Copy Python files to src
    cp web_app.py src/
    cp -r routes/* src/routes/ 2>/dev/null || true
    cp -r utils/* src/utils/ 2>/dev/null || true
    cp -r config/* src/config/ 2>/dev/null || true
    cp -r api/* src/api/ 2>/dev/null || true
    cp -r mock/* src/mock/ 2>/dev/null || true
    
    # Copy static files
    cp -r templates/* src/templates/ 2>/dev/null || true
    cp -r static/* src/static/ 2>/dev/null || true
    
    # Start the application
    echo "üöÄ Starting application..."
    exec python main.py --web
    
  # Main entry point
  main.py: |
    #!/usr/bin/env python3
    import argparse
    import sys
    import os
    from pathlib import Path
    
    # Add src to path
    sys.path.insert(0, str(Path(__file__).parent))
    sys.path.insert(0, str(Path(__file__).parent / 'src'))
    
    def main():
        parser = argparse.ArgumentParser(description='Nextrade FortiGate Network Monitor')
        parser.add_argument('--web', action='store_true', help='Start web application')
        args = parser.parse_args()
        
        if args.web:
            from src.web_app import create_app
            app = create_app()
            
            host = os.environ.get('WEB_APP_HOST', '0.0.0.0')
            port = int(os.environ.get('WEB_APP_PORT', 7777))
            debug = os.environ.get('FLASK_ENV') == 'development'
            
            print(f"üåê Server starting: http://{host}:{port}")
            print(f"üìä Mode: {os.getenv('APP_MODE', 'production')}")
            
            # Run without socketio for now (simplified)
            app.run(host=host, port=port, debug=debug)
    
    if __name__ == '__main__':
        main()

  # Web application factory
  web_app.py: |
    """
    Nextrade Fortigate - Web Application
    Flask-based web application (simplified for ConfigMap)
    """
    
    import os
    import json
    from flask import Flask, render_template, request, jsonify, redirect, url_for
    from datetime import datetime
    
    def create_app():
        """Flask application factory"""
        app = Flask(__name__)
        app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')
        app.config['JSON_AS_ASCII'] = False
        app.config['JSONIFY_PRETTYPRINT_REGULAR'] = True
        
        # Register blueprints
        from routes.main_routes import main_bp
        from routes.api_routes import api_bp
        
        app.register_blueprint(main_bp)
        app.register_blueprint(api_bp)
        
        # Error handlers
        @app.errorhandler(404)
        def not_found_error(error):
            return render_template('404.html'), 404
        
        @app.errorhandler(500)
        def internal_error(error):
            return render_template('500.html'), 500
        
        # Context processor
        @app.context_processor
        def inject_global_vars():
            return {
                'APP_MODE': os.getenv('APP_MODE', 'production'),
                'OFFLINE_MODE': os.getenv('OFFLINE_MODE', 'false').lower() == 'true',
                'show_test_mode': os.getenv('APP_MODE') != 'production'
            }
        
        return app

  # Routes
  routes/__init__.py: |
    # Routes package

  routes/main_routes.py: |
    """
    Main routes for pages
    """
    from flask import Blueprint, render_template, redirect, url_for
    import os
    from datetime import datetime
    
    main_bp = Blueprint('main', __name__)
    
    @main_bp.route('/')
    def index():
        """Homepage - redirect to dashboard"""
        return redirect(url_for('main.dashboard'))
    
    @main_bp.route('/dashboard')
    def dashboard():
        """Dashboard page"""
        # Default data for dashboard
        data = {
            'stats': {
                'total_devices': 24,
                'uptime_percentage': 99.8,
                'network_traffic': '2.4 Gbps',
                'active_alerts': 3,
                'trend_device_increase': 12,
                'trend_uptime_increase': 0.2,
                'trend_traffic_decrease': 8
            },
            'config': {
                'external_resources': {
                    'chartjs_cdn': 'https://cdn.jsdelivr.net/npm/chart.js',
                    'socketio_cdn': 'https://cdn.socket.io/4.5.4/socket.io.min.js'
                },
                'stats': {
                    'total_devices': 24,
                    'uptime_percentage': 99.8,
                    'network_traffic': '2.4 Gbps',
                    'active_alerts': 3,
                    'trend_device_increase': 12,
                    'trend_uptime_increase': 0.2,
                    'trend_traffic_decrease': 8
                },
                'device_list': {
                    'top_devices_limit': 5,
                    'trend_max_percentage': 20,
                    'bandwidth_display_unit': 'Mbps'
                }
            }
        }
        return render_template('dashboard.html', data=data)
    
    @main_bp.route('/policy-analysis')
    def policy_analysis():
        """FortiGate policy analysis page"""
        return render_template('index.html')
    
    @main_bp.route('/devices')
    def devices():
        """Device management page"""
        return render_template('devices.html')
    
    @main_bp.route('/settings')
    def settings():
        """Settings page"""
        return render_template('settings.html')

  routes/api_routes.py: |
    """
    API routes
    """
    from flask import Blueprint, jsonify, request
    from datetime import datetime
    import random
    
    api_bp = Blueprint('api', __name__, url_prefix='/api')
    
    @api_bp.route('/health')
    def health():
        """Health check endpoint"""
        return jsonify({
            "status": "healthy",
            "service": "Nextrade FortiGate Network Monitor",
            "version": "2.9.0",
            "timestamp": datetime.now().isoformat(),
            "environment": "production"
        })
    
    @api_bp.route('/devices')
    def get_devices():
        """Get devices list"""
        devices = []
        for i in range(10):
            devices.append({
                'name': f'FIREWALL-{i+1:02d}',
                'ip_address': f'192.168.{i+1}.{random.randint(1, 254)}',
                'status': random.choice(['online', 'online', 'online', 'offline']),
                'type': random.choice(['firewall', 'switch', 'router']),
                'bandwidth_in': random.randint(100, 1000),
                'bandwidth_out': random.randint(100, 1000)
            })
        
        return jsonify({
            'success': True,
            'devices': {
                'connected_devices': devices
            }
        })
    
    @api_bp.route('/settings', methods=['GET', 'POST'])
    def settings():
        """Settings API"""
        if request.method == 'GET':
            return jsonify({
                'success': True,
                'settings': {
                    'fortigate_host': '',
                    'fortigate_api_key': '',
                    'fortimanager_host': '',
                    'fortimanager_api_key': ''
                }
            })
        else:
            return jsonify({'success': True, 'message': 'Settings updated'})

  # Utils
  utils/__init__.py: |
    # Utils package

  utils/unified_logger.py: |
    """Simple logger wrapper"""
    import logging
    
    def get_logger(name):
        logger = logging.getLogger(name)
        logger.setLevel(logging.INFO)
        if not logger.handlers:
            handler = logging.StreamHandler()
            handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
            logger.addHandler(handler)
        return logger

  utils/security.py: |
    """Security utilities"""
    from functools import wraps
    from flask import request, jsonify
    
    def rate_limit(max_requests=30, window=60):
        def decorator(f):
            @wraps(f)
            def decorated_function(*args, **kwargs):
                # Simple rate limiting (in production, use Redis)
                return f(*args, **kwargs)
            return decorated_function
        return decorator
    
    def csrf_protect(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            # Simple CSRF protection
            return f(*args, **kwargs)
        return decorated_function
    
    def add_security_headers(response):
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        return response
    
    def generate_csrf_token():
        return 'dummy-csrf-token'

  # Config
  config/__init__.py: |
    # Config package

  config/unified_settings.py: |
    """Unified settings"""
    import os
    
    class UnifiedSettings:
        def __init__(self):
            self.app_mode = os.getenv('APP_MODE', 'production')
            self.webapp = type('obj', (object,), {
                'host': os.getenv('WEB_APP_HOST', '0.0.0.0'),
                'port': int(os.getenv('WEB_APP_PORT', 7777))
            })()
    
    unified_settings = UnifiedSettings()

  # API Integration
  api/__init__.py: |
    # API package

  api/integration/__init__.py: |
    # Integration package

  # Mock
  mock/__init__.py: |
    # Mock package

  mock/data_generator.py: |
    """Mock data generator"""
    import random
    from datetime import datetime, timedelta
    
    class DummyDataGenerator:
        def generate_dashboard_stats(self):
            return {
                'total_devices': 24,
                'online_devices': 22,
                'total_traffic': 2457.3,
                'active_alerts': 3,
                'uptime_percentage': 99.8
            }
        
        def generate_devices(self, count=10):
            devices = []
            for i in range(count):
                devices.append({
                    'id': f'dev-{i+1}',
                    'name': f'FIREWALL-{i+1:02d}',
                    'ip': f'192.168.{i+1}.{random.randint(1, 254)}',
                    'status': random.choice(['online', 'online', 'online', 'offline']),
                    'type': random.choice(['firewall', 'switch', 'router']),
                    'location': random.choice(['Î≥∏ÏÇ¨', 'ÏßÄÏÇ¨', 'Îç∞Ïù¥ÌÑ∞ÏÑºÌÑ∞'])
                })
            return devices
        
        def generate_security_events(self, count=5):
            events = []
            event_types = ['Ïπ®ÏûÖ ÏãúÎèÑ', 'Ï†ïÏ±Ö ÏúÑÎ∞ò', 'Ïù¥ÏÉÅ Ìä∏ÎûòÌîΩ', 'DDoS Í≥µÍ≤©']
            for i in range(count):
                events.append({
                    'id': f'evt-{i+1}',
                    'type': random.choice(event_types),
                    'severity': random.choice(['low', 'medium', 'high', 'critical']),
                    'source_ip': f'{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}.{random.randint(1,255)}',
                    'timestamp': (datetime.now() - timedelta(minutes=random.randint(1, 60))).isoformat()
                })
            return events

  # Templates
  templates/base.html: |
    <!DOCTYPE html>
    <html lang="ko" data-theme="light">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{% block title %}Nextrade Network Monitor{% endblock %}</title>
        
        <!-- PWA Meta Tags -->
        <meta name="theme-color" content="#0a0e27">
        
        <!-- CSS -->
        <link rel="stylesheet" href="{{ url_for('static', filename='css/nextrade-unified-system.css') }}?v=2.9">
        
        {% block head_extra %}{% endblock %}
    </head>
    <body>
        <div class="app-container">
            <!-- Sidebar -->
            <aside class="sidebar" id="sidebar">
                <div class="sidebar-header">
                    <div class="logo">
                        <img src="{{ url_for('static', filename='img/nextrade/logo_new.svg') }}" alt="Nextrade">
                    </div>
                </div>
                
                <nav class="nav-menu">
                    <div class="nav-item">
                        <a href="{{ url_for('main.dashboard') }}" class="nav-link {% if request.endpoint == 'main.dashboard' %}active{% endif %}">
                            <span class="nav-icon"><i class="fas fa-th-large"></i></span>
                            <span class="nav-text">ÎåÄÏãúÎ≥¥Îìú</span>
                        </a>
                    </div>
                    
                    <div class="nav-item">
                        <a href="{{ url_for('main.devices') }}" class="nav-link {% if request.endpoint == 'main.devices' %}active{% endif %}">
                            <span class="nav-icon"><i class="fas fa-server"></i></span>
                            <span class="nav-text">Ïû•Ïπò Í¥ÄÎ¶¨</span>
                        </a>
                    </div>
                    
                    <div class="nav-item">
                        <a href="{{ url_for('main.policy_analysis') }}" class="nav-link {% if request.endpoint == 'main.policy_analysis' %}active{% endif %}">
                            <span class="nav-icon"><i class="fas fa-search"></i></span>
                            <span class="nav-text">Ï†ïÏ±Ö Î∂ÑÏÑù</span>
                        </a>
                    </div>
                </nav>
                
                <div class="nav-menu" style="border-top: 1px solid var(--border); padding-top: 1rem;">
                    <div class="nav-item">
                        <a href="{{ url_for('main.settings') }}" class="nav-link {% if request.endpoint == 'main.settings' %}active{% endif %}">
                            <span class="nav-icon"><i class="fas fa-cog"></i></span>
                            <span class="nav-text">ÏÑ§Ï†ï</span>
                        </a>
                    </div>
                </div>
            </aside>
            
            <!-- Main Container -->
            <div class="main-container">
                <!-- Header -->
                <header class="header">
                    <div class="header-left">
                        <button class="menu-toggle" onclick="toggleSidebar()">
                            <i class="fas fa-bars"></i>
                        </button>
                        
                        <div class="search-box">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" class="search-input" placeholder="Í≤ÄÏÉâ...">
                        </div>
                    </div>
                    
                    <div class="header-right">
                        <button class="header-btn">
                            <i class="fas fa-bell"></i>
                            <span class="notification-badge"></span>
                        </button>
                        
                        <button class="header-btn" onclick="toggleTheme()">
                            <i class="fas fa-moon"></i>
                        </button>
                    </div>
                </header>
                
                <!-- Content -->
                <main class="content">
                    {% block content %}{% endblock %}
                </main>
            </div>
        </div>
        
        <script>
            // Toggle Sidebar
            function toggleSidebar() {
                const sidebar = document.getElementById('sidebar');
                sidebar.classList.toggle('collapsed');
            }
            
            // Theme Toggle
            function toggleTheme() {
                const html = document.documentElement;
                const currentTheme = html.getAttribute('data-theme');
                html.setAttribute('data-theme', currentTheme === 'dark' ? 'light' : 'dark');
            }
        </script>
        
        {% block scripts %}{% endblock %}
    </body>
    </html>

  templates/dashboard.html: |
    {% extends "base.html" %}
    
    {% block title %}ÎåÄÏãúÎ≥¥Îìú - Nextrade Network Monitor{% endblock %}
    
    {% block head_extra %}
    <!-- Chart.js CDN as fallback -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    {% endblock %}
    
    {% block content %}
    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">ÎÑ§Ìä∏ÏõåÌÅ¨ ÎåÄÏãúÎ≥¥Îìú</h1>
        <p class="page-subtitle">Ïã§ÏãúÍ∞Ñ ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÉÅÌÉú Î∞è ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ</p>
    </div>
    
    <!-- Stats Grid -->
    <div class="grid grid-cols-4">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-server fa-lg"></i>
            </div>
            <div class="stat-value" id="active-devices">{{ data.stats.total_devices if data and data.stats else 24 }}</div>
            <div class="stat-label">ÌôúÏÑ± Ïû•Ïπò</div>
            <div class="stat-trend trend-up">
                <i class="fas fa-arrow-up"></i> {{ data.config.stats.trend_device_increase if data.config else 12 }}%
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon stat-icon-success">
                <i class="fas fa-globe fa-lg"></i>
            </div>
            <div class="stat-value" id="uptime">{{ data.config.stats.uptime_percentage if data.config else '99.8' }}%</div>
            <div class="stat-label">Í∞ÄÎèôÎ•†</div>
            <div class="stat-trend trend-up">
                <i class="fas fa-arrow-up"></i> {{ data.config.stats.trend_uptime_increase if data.config else 0.2 }}%
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon stat-icon-info">
                <i class="fas fa-exchange-alt fa-lg"></i>
            </div>
            <div class="stat-value" id="network-traffic">{{ data.config.stats.network_traffic if data.config else '2.4 Gbps' }}</div>
            <div class="stat-label">ÎÑ§Ìä∏ÏõåÌÅ¨ Ìä∏ÎûòÌîΩ</div>
            <div class="stat-trend trend-down">
                <i class="fas fa-arrow-down"></i> {{ data.config.stats.trend_traffic_decrease if data.config else 8 }}%
            </div>
        </div>
        
        <div class="stat-card">
            <div class="stat-icon stat-icon-warning">
                <i class="fas fa-exclamation-triangle fa-lg"></i>
            </div>
            <div class="stat-value" id="active-alerts">{{ data.config.stats.active_alerts if data.config else 3 }}</div>
            <div class="stat-label">ÌôúÏÑ± ÏïåÎ¶º</div>
        </div>
    </div>
    
    <!-- Main Content Grid -->
    <div class="grid grid-cols-3">
        <!-- Network Performance Chart -->
        <div class="card span-2">
            <div class="card-header">
                <h3 class="card-title">ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ±Îä•</h3>
                <div class="btn-group">
                    <button class="btn-time">1ÏãúÍ∞Ñ</button>
                    <button class="btn-time active">24ÏãúÍ∞Ñ</button>
                    <button class="btn-time">7Ïùº</button>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="performanceChart"></canvas>
            </div>
        </div>
        
        <!-- Top Devices -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">ÏÉÅÏúÑ Ïû•Ïπò (Ìä∏ÎûòÌîΩ)</h3>
                <a href="#" class="link-accent">Ï†ÑÏ≤¥ Î≥¥Í∏∞</a>
            </div>
            <div class="device-list" id="top-devices-list">
                <!-- ÎèôÏ†ÅÏúºÎ°ú Î°úÎìúÎê® -->
            </div>
        </div>
    </div>
    
    <!-- Quick Actions -->
    <div class="content-grid-2 mt-6">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Îπ†Î•∏ ÏûëÏóÖ</h3>
            </div>
            <div class="quick-actions-grid">
                <button class="quick-action-btn" onclick="location.href='/policy-analysis'">
                    <i class="fas fa-route quick-action-icon" style="color: #7C3AED;"></i>
                    <span>Í≤ΩÎ°ú Î∂ÑÏÑù</span>
                </button>
                
                <button class="quick-action-btn" onclick="generateReport()">
                    <i class="fas fa-file-alt quick-action-icon" style="color: var(--success);"></i>
                    <span>Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±</span>
                </button>
            </div>
        </div>
    </div>
    {% endblock %}
    
    {% block scripts %}
    <script>
    // Load devices
    function loadTopDevices() {
        fetch('/api/devices')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.devices && data.devices.connected_devices) {
                    const deviceList = document.getElementById('top-devices-list');
                    deviceList.innerHTML = '';
                    
                    const devices = data.devices.connected_devices.slice(0, 5);
                    devices.forEach(device => {
                        const bandwidth = device.bandwidth_in + device.bandwidth_out;
                        const html = `
                            <div class="device-item">
                                <div class="device-info">
                                    <div class="status-indicator status-${device.status}"></div>
                                    <div>
                                        <div class="device-name">${device.name}</div>
                                        <div class="device-ip">${device.ip_address}</div>
                                    </div>
                                </div>
                                <div class="device-stats">
                                    <div class="device-value">${bandwidth} Mbps</div>
                                </div>
                            </div>
                        `;
                        deviceList.innerHTML += html;
                    });
                }
            })
            .catch(error => console.error('Error loading devices:', error));
    }
    
    // Initialize chart
    window.addEventListener('load', function() {
        loadTopDevices();
        
        const ctx = document.getElementById('performanceChart');
        if (ctx) {
            window.performanceChart = new Chart(ctx.getContext('2d'), {
                type: 'line',
                data: {
                    labels: Array.from({length: 24}, (_, i) => `${i}:00`),
                    datasets: [{
                        label: 'Inbound',
                        data: Array.from({length: 24}, () => Math.random() * 3 + 1),
                        borderColor: '#22c55e',
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        tension: 0.4,
                        fill: true
                    }, {
                        label: 'Outbound',
                        data: Array.from({length: 24}, () => Math.random() * 2 + 0.5),
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    },
                    scales: {
                        y: {
                            ticks: {
                                callback: function(value) {
                                    return value + ' Gbps';
                                }
                            }
                        }
                    }
                }
            });
        }
    });
    
    function generateReport() {
        alert('Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.');
    }
    </script>
    {% endblock %}

  templates/devices.html: |
    {% extends "base.html" %}
    
    {% block title %}Ïû•Ïπò Í¥ÄÎ¶¨ - Nextrade Network Monitor{% endblock %}
    
    {% block content %}
    <div class="page-header">
        <h1 class="page-title">Ïû•Ïπò Í¥ÄÎ¶¨</h1>
        <p class="page-subtitle">ÎÑ§Ìä∏ÏõåÌÅ¨ Ïû•Ïπò ÌòÑÌô© Î∞è Í¥ÄÎ¶¨</p>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Ïó∞Í≤∞Îêú Ïû•Ïπò</h3>
        </div>
        <div class="card-body">
            <p>Ïû•Ïπò Î™©Î°ùÏù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§.</p>
        </div>
    </div>
    {% endblock %}

  templates/index.html: |
    {% extends "base.html" %}
    
    {% block title %}Ï†ïÏ±Ö Î∂ÑÏÑù - Nextrade Network Monitor{% endblock %}
    
    {% block content %}
    <div class="page-header">
        <h1 class="page-title">FortiGate Ï†ïÏ±Ö Î∂ÑÏÑù</h1>
        <p class="page-subtitle">Î∞©ÌôîÎ≤Ω Ï†ïÏ±Ö Í≤ΩÎ°ú Î∂ÑÏÑù ÎèÑÍµ¨</p>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Í≤ΩÎ°ú Î∂ÑÏÑù</h3>
        </div>
        <div class="card-body">
            <form id="analysis-form">
                <div class="form-group">
                    <label>Source IP</label>
                    <input type="text" class="form-control" name="src_ip" placeholder="192.168.1.100">
                </div>
                <div class="form-group">
                    <label>Destination IP</label>
                    <input type="text" class="form-control" name="dst_ip" placeholder="10.0.0.100">
                </div>
                <div class="form-group">
                    <label>Port</label>
                    <input type="text" class="form-control" name="port" placeholder="443">
                </div>
                <button type="submit" class="btn-primary">Î∂ÑÏÑù ÏãúÏûë</button>
            </form>
        </div>
    </div>
    {% endblock %}

  templates/settings.html: |
    {% extends "base.html" %}
    
    {% block title %}ÏÑ§Ï†ï - Nextrade Network Monitor{% endblock %}
    
    {% block content %}
    <div class="page-header">
        <h1 class="page-title">ÏãúÏä§ÌÖú ÏÑ§Ï†ï</h1>
        <p class="page-subtitle">FortiGate Î∞è FortiManager Ïó∞Í≤∞ ÏÑ§Ï†ï</p>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">API ÏÑ§Ï†ï</h3>
        </div>
        <div class="card-body">
            <form id="settings-form">
                <div class="form-group">
                    <label>FortiGate Host</label>
                    <input type="text" class="form-control" name="fortigate_host" placeholder="https://fortigate.example.com">
                </div>
                <div class="form-group">
                    <label>FortiGate API Key</label>
                    <input type="password" class="form-control" name="fortigate_api_key">
                </div>
                <div class="form-group">
                    <label>FortiManager Host</label>
                    <input type="text" class="form-control" name="fortimanager_host" placeholder="https://fortimanager.example.com">
                </div>
                <div class="form-group">
                    <label>FortiManager API Key</label>
                    <input type="password" class="form-control" name="fortimanager_api_key">
                </div>
                <button type="submit" class="btn-primary">Ï†ÄÏû•</button>
            </form>
        </div>
    </div>
    {% endblock %}

  templates/404.html: |
    {% extends "base.html" %}
    
    {% block title %}404 - Page Not Found{% endblock %}
    
    {% block content %}
    <div class="error-page">
        <h1>404</h1>
        <p>ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.</p>
        <a href="{{ url_for('main.dashboard') }}" class="btn-primary">ÎåÄÏãúÎ≥¥ÎìúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</a>
    </div>
    {% endblock %}

  templates/500.html: |
    {% extends "base.html" %}
    
    {% block title %}500 - Server Error{% endblock %}
    
    {% block content %}
    <div class="error-page">
        <h1>500</h1>
        <p>ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.</p>
        <a href="{{ url_for('main.dashboard') }}" class="btn-primary">ÎåÄÏãúÎ≥¥ÎìúÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞</a>
    </div>
    {% endblock %}

  # Static files
  static/css/nextrade-unified-system.css: |
    /*
     * Nextrade Unified Design System
     * Version: 2.9
     */
    
    /* CSS Reset and Base */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    /* CSS Variables */
    :root {
      --primary: #E50038;
      --primary-dark: #C60030;
      --primary-hover: #ff1744;
      --secondary: #64748b;
      
      --bg-primary: #f8fafc;
      --bg-secondary: #f1f5f9;
      --bg-card: #ffffff;
      --bg-hover: rgba(229, 0, 56, 0.08);
      
      --text-primary: #1e293b;
      --text-secondary: #64748b;
      --text-muted: #94a3b8;
      
      --border: #e2e8f0;
      --border-radius: 0.5rem;
      --border-radius-lg: 0.75rem;
      
      --success: #22c55e;
      --warning: #f59e0b;
      --danger: #ef4444;
      --info: #2196F3;
      
      --sidebar-width: 250px;
      --sidebar-collapsed: 60px;
      --header-height: 60px;
      
      --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
      --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      
      --transition: all 0.3s ease;
    }
    
    /* Font Awesome Icons */
    .fa, .fas { font-family: 'Font Awesome 6 Free', sans-serif; font-weight: 900; }
    .far { font-family: 'Font Awesome 6 Free', sans-serif; font-weight: 400; }
    
    /* Base Elements */
    html {
      height: 100%;
      scroll-behavior: smooth;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: var(--bg-secondary);
      color: var(--text-primary);
      height: 100vh;
      overflow: hidden;
      line-height: 1.6;
    }
    
    /* Layout Container */
    .app-container {
      display: flex;
      height: 100vh;
      width: 100vw;
    }
    
    /* Sidebar */
    .sidebar {
      width: var(--sidebar-width);
      background: var(--bg-card);
      border-right: 1px solid var(--border);
      display: flex;
      flex-direction: column;
      transition: var(--transition);
    }
    
    .sidebar.collapsed {
      width: var(--sidebar-collapsed);
    }
    
    .sidebar-header {
      height: var(--header-height);
      display: flex;
      align-items: center;
      padding: 0 1.5rem;
      border-bottom: 1px solid var(--border);
    }
    
    .logo img {
      height: 32px;
      width: auto;
    }
    
    /* Navigation */
    .nav-menu {
      flex: 1;
      padding: 1.5rem 0;
      overflow-y: auto;
    }
    
    .nav-item {
      margin: 0.125rem 0.75rem;
    }
    
    .nav-link {
      display: flex;
      align-items: center;
      gap: 0.875rem;
      padding: 0.875rem 1.25rem;
      color: var(--text-secondary);
      text-decoration: none;
      border-radius: 0.75rem;
      transition: var(--transition);
    }
    
    .nav-link:hover {
      background: var(--bg-hover);
      color: var(--primary);
    }
    
    .nav-link.active {
      background: var(--bg-hover);
      color: var(--primary);
      font-weight: 600;
    }
    
    .nav-icon {
      width: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    /* Main Container */
    .main-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    /* Header */
    .header {
      height: var(--header-height);
      background: var(--bg-card);
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 2rem;
    }
    
    .header-left, .header-right {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    
    .menu-toggle {
      background: none;
      border: none;
      font-size: 1.25rem;
      color: var(--text-secondary);
      cursor: pointer;
      padding: 0.5rem;
    }
    
    .search-box {
      position: relative;
      width: 300px;
    }
    
    .search-input {
      width: 100%;
      padding: 0.5rem 1rem 0.5rem 2.5rem;
      border: 1px solid var(--border);
      border-radius: var(--border-radius);
      background: var(--bg-primary);
    }
    
    .search-icon {
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-muted);
    }
    
    .header-btn {
      background: none;
      border: none;
      font-size: 1.125rem;
      color: var(--text-secondary);
      cursor: pointer;
      padding: 0.5rem;
      position: relative;
    }
    
    .notification-badge {
      position: absolute;
      top: 0;
      right: 0;
      width: 8px;
      height: 8px;
      background: var(--danger);
      border-radius: 50%;
    }
    
    /* Content */
    .content {
      flex: 1;
      padding: 2rem;
      overflow-y: auto;
      background: var(--bg-secondary);
    }
    
    /* Page Header */
    .page-header {
      margin-bottom: 2rem;
    }
    
    .page-title {
      font-size: 1.75rem;
      font-weight: 700;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
    }
    
    .page-subtitle {
      color: var(--text-secondary);
      font-size: 0.95rem;
    }
    
    /* Grid System */
    .grid {
      display: grid;
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }
    
    .grid-cols-4 {
      grid-template-columns: repeat(4, 1fr);
    }
    
    .grid-cols-3 {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .content-grid-2 {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
    
    .span-2 {
      grid-column: span 2;
    }
    
    /* Cards */
    .card {
      background: var(--bg-card);
      border-radius: var(--border-radius-lg);
      box-shadow: var(--shadow-sm);
      overflow: hidden;
    }
    
    .card-header {
      padding: 1.25rem 1.5rem;
      border-bottom: 1px solid var(--border);
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .card-title {
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--text-primary);
    }
    
    .card-body {
      padding: 1.5rem;
    }
    
    /* Stat Cards */
    .stat-card {
      background: var(--bg-card);
      border-radius: var(--border-radius-lg);
      padding: 1.5rem;
      box-shadow: var(--shadow-sm);
      position: relative;
      overflow: hidden;
    }
    
    .stat-icon {
      width: 48px;
      height: 48px;
      background: var(--bg-primary);
      border-radius: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .stat-icon-success {
      color: var(--success);
    }
    
    .stat-icon-info {
      color: var(--info);
    }
    
    .stat-icon-warning {
      color: var(--warning);
    }
    
    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--text-primary);
      line-height: 1;
      margin-bottom: 0.5rem;
    }
    
    .stat-label {
      color: var(--text-secondary);
      font-size: 0.875rem;
    }
    
    .stat-trend {
      position: absolute;
      top: 1.5rem;
      right: 1.5rem;
      font-size: 0.875rem;
      font-weight: 500;
    }
    
    .trend-up {
      color: var(--success);
    }
    
    .trend-down {
      color: var(--danger);
    }
    
    /* Chart Container */
    .chart-container {
      padding: 1.5rem;
      height: 300px;
      position: relative;
    }
    
    /* Device List */
    .device-list {
      padding: 0.5rem;
    }
    
    .device-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0.75rem;
      border-radius: 0.5rem;
      transition: var(--transition);
    }
    
    .device-item:hover {
      background: var(--bg-primary);
    }
    
    .device-info {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .status-indicator {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      flex-shrink: 0;
    }
    
    .status-online {
      background: var(--success);
    }
    
    .status-offline {
      background: var(--danger);
    }
    
    .device-name {
      font-weight: 500;
      color: var(--text-primary);
    }
    
    .device-ip {
      font-size: 0.875rem;
      color: var(--text-muted);
    }
    
    .device-stats {
      text-align: right;
    }
    
    .device-value {
      font-weight: 600;
      color: var(--text-primary);
    }
    
    /* Buttons */
    .btn-primary {
      background: var(--primary);
      color: white;
      border: none;
      padding: 0.625rem 1.25rem;
      border-radius: var(--border-radius);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .btn-primary:hover {
      background: var(--primary-dark);
    }
    
    .btn-time {
      background: none;
      border: 1px solid var(--border);
      padding: 0.375rem 0.75rem;
      border-radius: 0.375rem;
      color: var(--text-secondary);
      font-size: 0.875rem;
      cursor: pointer;
      transition: var(--transition);
    }
    
    .btn-time.active {
      background: var(--primary);
      color: white;
      border-color: var(--primary);
    }
    
    .btn-group {
      display: flex;
      gap: 0.5rem;
    }
    
    /* Quick Actions */
    .quick-actions-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
    
    .quick-action-btn {
      background: var(--bg-primary);
      border: 1px solid var(--border);
      border-radius: var(--border-radius);
      padding: 1.5rem;
      text-align: center;
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.75rem;
    }
    
    .quick-action-btn:hover {
      background: var(--bg-hover);
      border-color: var(--primary);
    }
    
    .quick-action-icon {
      font-size: 1.75rem;
    }
    
    /* Forms */
    .form-group {
      margin-bottom: 1.25rem;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      color: var(--text-primary);
      font-weight: 500;
    }
    
    .form-control {
      width: 100%;
      padding: 0.625rem 0.875rem;
      border: 1px solid var(--border);
      border-radius: var(--border-radius);
      background: var(--bg-card);
      color: var(--text-primary);
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--primary);
    }
    
    /* Error Pages */
    .error-page {
      text-align: center;
      padding: 4rem 2rem;
    }
    
    .error-page h1 {
      font-size: 5rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .error-page p {
      color: var(--text-secondary);
      margin-bottom: 2rem;
    }
    
    /* Utilities */
    .mt-6 {
      margin-top: 2.5rem;
    }
    
    .link-accent {
      color: var(--primary);
      text-decoration: none;
      font-weight: 500;
    }
    
    .link-accent:hover {
      text-decoration: underline;
    }
    
    /* Responsive */
    @media (max-width: 1280px) {
      .grid-cols-4 {
        grid-template-columns: repeat(2, 1fr);
      }
      
      .grid-cols-3 {
        grid-template-columns: 1fr;
      }
      
      .span-2 {
        grid-column: span 1;
      }
    }
    
    @media (max-width: 768px) {
      .sidebar {
        position: fixed;
        left: -100%;
        z-index: 1000;
      }
      
      .sidebar.mobile-open {
        left: 0;
      }
      
      .content-grid-2 {
        grid-template-columns: 1fr;
      }
      
      .search-box {
        display: none;
      }
    }

  static/img/nextrade/logo_new.svg: |
    <svg width="181" height="32" viewBox="0 0 181 32" fill="none" xmlns="http://www.w3.org/2000/svg">
    <g clip-path="url(#clip0_1048_3143)">
    <path d="M28.5992 17.2802V10.6777V10.6612C28.5992 8.61953 27.5125 6.74249 25.7507 5.72165L17.1724 0.765631C15.4106 -0.25521 13.2207 -0.25521 11.4589 0.765631L2.84766 5.72165L15.7234 13.345L21.1405 8.5372V28.1637L25.7343 25.5293C27.496 24.5084 28.5827 22.6314 28.5827 20.5897V17.2802H28.5992Z" fill="url(#paint0_linear_1048_3143)"/>
    <path d="M0 13.9694V20.572V20.5884C0 22.6301 1.0867 24.5071 2.84848 25.528L11.4268 30.484C13.1886 31.5049 15.3785 31.5049 17.1403 30.484L25.8997 25.4292L12.8593 17.9046L7.44226 22.7124V3.08594L2.84848 5.72037C1.0867 6.74121 0 8.61824 0 10.6599V13.9694Z" fill="url(#paint1_linear_1048_3143)"/>
    <path d="M51.8885 20.8671H51.3879L47.1198 9.94258C46.7751 9.08898 45.8559 8.54727 44.7806 8.54727H42.1295C40.7014 8.54727 39.659 9.4255 39.659 10.632L39.6016 22.8369H43.3443L43.4017 10.7387H43.9024L48.0555 21.4252C48.392 22.287 49.2785 22.8369 50.3701 22.8369H55.623L55.6805 8.53906H51.9378L51.8885 20.8671Z" fill="#E10139"/>
    <path d="M72.557 20.7147L63.1673 20.7229L63.1755 16.9227L72.122 16.9145C72.3682 16.9145 72.5652 16.7175 72.5652 16.4713V14.8297L63.1755 14.8379V10.5781L72.5406 10.5699C72.7868 10.5699 72.9838 10.3729 72.9838 10.1267V8.46875L60.4916 8.49337C59.3754 8.49337 58.727 9.04329 58.727 9.99539L58.7188 22.8159H73.0166V21.1661C73.0166 20.9199 72.8114 20.7147 72.557 20.7147Z" fill="#E10139"/>
    <path d="M180.01 20.7139L170.62 20.7221L170.628 16.9219L179.575 16.9137C179.821 16.9137 180.018 16.7167 180.018 16.4705V14.8289L170.636 14.8372V10.5773L180.001 10.5691C180.248 10.5691 180.445 10.3722 180.445 10.1259V8.48438L167.953 8.49258C166.836 8.49258 166.188 9.0425 166.188 9.9946L166.18 22.8151H180.478V21.1653C180.469 20.9191 180.264 20.7139 180.01 20.7139Z" fill="#E10139"/>
    <path d="M92.1406 11.0546H97.6398L97.6316 22.8245H102.08L102.088 11.0546H107.588L107.596 8.46094H92.1406V11.0546Z" fill="#E10139"/>
    <path d="M125.536 13.9773V11.9254C125.536 11.3098 125.396 10.686 125.059 10.1607C124.354 9.06089 123.04 8.44531 121.506 8.44531C121.506 8.44531 121.506 8.44531 121.497 8.44531L109.555 8.45352L109.547 22.817H114.004L114.012 17.3671H118.042L120.759 21.8814C121.087 22.4231 121.67 22.817 122.293 22.817H125.979L122.655 17.2276C124.395 16.85 125.536 15.5696 125.536 13.9773ZM121.391 14.1004C121.391 14.7324 120.824 15.4301 120.036 15.4301L114.004 15.4383L114.012 10.5629L120.045 10.5547C120.43 10.5547 120.783 10.6696 121.029 10.8748C121.267 11.0718 121.399 11.3344 121.399 11.6381L121.391 14.1004Z" fill="#E10139"/>
    <path d="M159.031 8.42188H159.023L149.132 8.43008C148.016 8.43008 147.368 8.98 147.368 9.9321L147.359 22.8264H159.014C162.002 22.8264 163.652 21.3408 163.652 18.8375L163.66 12.2959C163.66 11.1633 163.332 10.2604 162.675 9.60379C161.879 8.82405 160.656 8.42188 159.031 8.42188ZM159.154 18.78C159.154 19.847 158.202 20.6186 156.897 20.6186L151.816 20.6268L151.824 10.5395L156.913 10.5313C157.635 10.5313 158.259 10.7611 158.67 11.1715C158.99 11.4916 159.162 11.902 159.162 12.3616L159.154 18.78Z" fill="#E10139"/>
    <path d="M138.389 8.44531H136.599H134.211C132.955 8.44531 132.159 8.95419 131.798 10.0048L127.415 22.8335H127.316H131.773L133.521 17.6954H136.304H139.086L140.835 22.8335H145.291L140.81 10.0048C140.432 8.95419 139.644 8.44531 138.389 8.44531ZM136.296 15.5696H134.236L135.91 10.8912C135.976 10.7189 136.09 10.6286 136.296 10.5957C136.501 10.6286 136.616 10.7189 136.681 10.883L138.356 15.5696H136.296Z" fill="#E10139"/>
    <path d="M86.6986 8.46094L83.0954 12.9506L79.5005 8.47735H75.1914L80.8958 15.6919L75.1914 22.8245H79.6728L83.0954 18.4744L86.5263 22.8245H91.0077L85.2951 15.6919L91.0077 8.46094H86.6986Z" fill="#E10139"/>
    </g>
    <defs>
    <linearGradient id="paint0_linear_1048_3143" x1="2.85424" y1="14.0791" x2="28.5999" y2="14.0791" gradientUnits="userSpaceOnUse">
    <stop stop-color="#301942"/>
    <stop offset="0.2606" stop-color="#6E103F"/>
    <stop offset="0.5068" stop-color="#A2093C"/>
    <stop offset="0.7198" stop-color="#C7043B"/>
    <stop offset="0.8914" stop-color="#DE0139"/>
    <stop offset="1" stop-color="#E60039"/>
    </linearGradient>
    <linearGradient id="paint1_linear_1048_3143" x1="17.8285" y1="32.0839" x2="4.87007" y2="9.98222" gradientUnits="userSpaceOnUse">
    <stop stop-color="#301942"/>
    <stop offset="0.2606" stop-color="#6E103F"/>
    <stop offset="0.5068" stop-color="#A2093C"/>
    <stop offset="0.7198" stop-color="#C7043B"/>
    <stop offset="0.8914" stop-color="#DE0139"/>
    <stop offset="1" stop-color="#E60039"/>
    </linearGradient>
    <clipPath id="clip0_1048_3143">
    <rect width="180.478" height="31.2509" fill="white"/>
    </clipPath>
    </defs>
    </svg>

  static/js/dashboard-realtime.js: |
    // Simplified dashboard realtime functions
    console.log('Dashboard realtime loaded (simplified version)');