version: '3.8'

services:
  # API Gateway (Kong)
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa

  kong-migrations:
    image: kong/kong-gateway:3.4.0
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    networks:
      - fortinet-msa

  kong:
    image: kong/kong-gateway:3.4.0
    depends_on:
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"   # Proxy port
      - "8001:8001"   # Admin API port
      - "8002:8002"   # Admin GUI port
    networks:
      - fortinet-msa

  # Service Discovery (Consul)
  consul:
    image: consul:1.16
    command: agent -server -bootstrap -ui -node=server-1 -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1
    ports:
      - "8500:8500"
    environment:
      CONSUL_BIND_INTERFACE: eth0
    networks:
      - fortinet-msa

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: fortinet
      RABBITMQ_DEFAULT_PASS: fortinet123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - fortinet-msa

  # Redis (Shared Cache)
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fortinet-msa

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: services/auth/Dockerfile
    environment:
      SERVICE_NAME: auth-service
      SERVICE_PORT: 8081
      REDIS_URL: redis://redis:6379
      CONSUL_URL: http://consul:8500
    ports:
      - "8081:8081"
    depends_on:
      - redis
      - consul
    networks:
      - fortinet-msa
    restart: unless-stopped

  # FortiManager Service
  fortimanager-service:
    build:
      context: .
      dockerfile: services/fortimanager/Dockerfile
    environment:
      SERVICE_NAME: fortimanager-service
      SERVICE_PORT: 8082
      DATABASE_URL: postgresql://fortimanager:fm123@fortimanager-db:5432/fortimanager
      CONSUL_URL: http://consul:8500
      RABBITMQ_URL: amqp://fortinet:fortinet123@rabbitmq:5672/
    ports:
      - "8082:8082"
    depends_on:
      - fortimanager-db
      - consul
      - rabbitmq
    networks:
      - fortinet-msa
    restart: unless-stopped

  fortimanager-db:
    image: postgres:15
    environment:
      POSTGRES_DB: fortimanager
      POSTGRES_USER: fortimanager
      POSTGRES_PASSWORD: fm123
    volumes:
      - fortimanager_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa

  # ITSM Service
  itsm-service:
    build:
      context: .
      dockerfile: services/itsm/Dockerfile
    environment:
      SERVICE_NAME: itsm-service
      SERVICE_PORT: 8083
      DATABASE_URL: postgresql://itsm:itsm123@itsm-db:5432/itsm
      CONSUL_URL: http://consul:8500
      RABBITMQ_URL: amqp://fortinet:fortinet123@rabbitmq:5672/
    ports:
      - "8083:8083"
    depends_on:
      - itsm-db
      - consul
      - rabbitmq
    networks:
      - fortinet-msa
    restart: unless-stopped

  itsm-db:
    image: postgres:15
    environment:
      POSTGRES_DB: itsm
      POSTGRES_USER: itsm
      POSTGRES_PASSWORD: itsm123
    volumes:
      - itsm_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa

  # Monitoring Service
  monitoring-service:
    build:
      context: .
      dockerfile: services/monitoring/Dockerfile
    environment:
      SERVICE_NAME: monitoring-service
      SERVICE_PORT: 8084
      INFLUXDB_URL: http://influxdb:8086
      REDIS_URL: redis://redis:6379
      CONSUL_URL: http://consul:8500
    ports:
      - "8084:8084"
    depends_on:
      - influxdb
      - redis
      - consul
    networks:
      - fortinet-msa
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: fortinet
      DOCKER_INFLUXDB_INIT_PASSWORD: fortinet123
      DOCKER_INFLUXDB_INIT_ORG: fortinet
      DOCKER_INFLUXDB_INIT_BUCKET: monitoring
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - fortinet-msa

  # Security Service
  security-service:
    build:
      context: .
      dockerfile: services/security/Dockerfile
    environment:
      SERVICE_NAME: security-service
      SERVICE_PORT: 8085
      MONGODB_URL: mongodb://security:sec123@mongodb:27017/security
      CONSUL_URL: http://consul:8500
    ports:
      - "8085:8085"
    depends_on:
      - mongodb
      - consul
    networks:
      - fortinet-msa
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: security
      MONGO_INITDB_ROOT_PASSWORD: sec123
      MONGO_INITDB_DATABASE: security
    volumes:
      - mongodb_data:/data/db
    networks:
      - fortinet-msa

  # Analysis Service
  analysis-service:
    build:
      context: .
      dockerfile: services/analysis/Dockerfile
    environment:
      SERVICE_NAME: analysis-service
      SERVICE_PORT: 8086
      DATABASE_URL: postgresql://analysis:analysis123@analysis-db:5432/analysis
      CONSUL_URL: http://consul:8500
    ports:
      - "8086:8086"
    depends_on:
      - analysis-db
      - consul
    networks:
      - fortinet-msa
    restart: unless-stopped

  analysis-db:
    image: postgres:15
    environment:
      POSTGRES_DB: analysis
      POSTGRES_USER: analysis
      POSTGRES_PASSWORD: analysis123
    volumes:
      - analysis_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa

  # Configuration Service
  config-service:
    build:
      context: .
      dockerfile: services/config/Dockerfile
    environment:
      SERVICE_NAME: config-service
      SERVICE_PORT: 8087
      ETCD_URL: http://etcd:2379
      CONSUL_URL: http://consul:8500
    ports:
      - "8087:8087"
    depends_on:
      - etcd
      - consul
    networks:
      - fortinet-msa
    restart: unless-stopped

  etcd:
    image: quay.io/coreos/etcd:v3.5.9
    command:
      - /usr/local/bin/etcd
      - --data-dir=/etcd-data
      - --name=node1
      - --initial-advertise-peer-urls=http://etcd:2380
      - --listen-peer-urls=http://0.0.0.0:2380
      - --advertise-client-urls=http://etcd:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --initial-cluster=node1=http://etcd:2380
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - etcd_data:/etcd-data
    networks:
      - fortinet-msa

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - fortinet-msa

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - fortinet-msa

volumes:
  kong_data:
  rabbitmq_data:
  redis_data:
  fortimanager_data:
  itsm_data:
  influxdb_data:
  mongodb_data:
  analysis_data:
  etcd_data:
  prometheus_data:
  grafana_data:

networks:
  fortinet-msa:
    driver: bridge