# =============================================================================
# FortiGate Nextrade - Production Dockerfile
# Single container deployment with performance optimization
# =============================================================================

FROM python:3.11-slim as base

# Build arguments
ARG BUILD_DATE
ARG GIT_COMMIT
ARG GIT_BRANCH
ARG VERSION

# Environment setup
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONPATH=/app/src \
    APP_MODE=${APP_MODE:-production} \
    WEB_APP_HOST=${WEB_APP_HOST:-0.0.0.0} \
    WEB_APP_PORT=${WEB_APP_PORT:-7777}

# Labels for image metadata
LABEL maintainer="FortiGate Nextrade Team" \
      version="${VERSION}" \
      description="FortiGate Nextrade - Network Monitoring Platform" \
      build-date="${BUILD_DATE}" \
      git-commit="${GIT_COMMIT}" \
      git-branch="${GIT_BRANCH}" \
      registry="registry.jclee.me"

# =============================================================================
# System Dependencies Stage
# =============================================================================
FROM base as system-deps

# Install system dependencies in single layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential \
    gcc \
    g++ \
    # Network tools
    curl \
    wget \
    netcat-openbsd \
    iputils-ping \
    # System utilities
    procps \
    htop \
    # Security tools
    ca-certificates \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# =============================================================================
# Python Dependencies Stage
# =============================================================================
FROM system-deps as python-deps

# Create app user for security
RUN groupadd -r fortinet && useradd -r -g fortinet -s /bin/bash fortinet

# Create application directories
RUN mkdir -p /app/src \
    /app/data \
    /app/logs \
    /app/temp \
    && chown -R fortinet:fortinet /app

# Copy requirements first for better caching
COPY requirements.txt /app/
WORKDIR /app

# Install Python dependencies with optimization
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    # Additional production packages
    pip install --no-cache-dir \
    gunicorn \
    gevent \
    psutil \
    prometheus-client

# =============================================================================
# Application Stage
# =============================================================================
FROM python-deps as app

# Copy application code
COPY --chown=fortinet:fortinet . /app/

# Skip bytecode compilation for now (syntax errors in some files)
# RUN python -m compileall /app/src/ -b -q

# Set proper permissions
RUN chmod +x /app/src/main.py && \
    chmod -R 755 /app/src && \
    chmod -R 777 /app/data /app/logs /app/temp

# =============================================================================
# Production Configuration
# =============================================================================

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python3 -c "import urllib.request; urllib.request.urlopen('http://localhost:${WEB_APP_PORT}/api/health', timeout=5)" || exit 1

# Performance and resource settings
ENV PYTHONOPTIMIZE=2 \
    MALLOC_ARENA_MAX=2 \
    # Memory optimization
    PYTHONMALLOC=malloc \
    # Performance settings
    FLASK_ENV=production \
    FLASK_DEBUG=false \
    # Worker configuration
    WEB_CONCURRENCY=4 \
    WORKERS=4 \
    WORKER_CLASS=gevent \
    WORKER_CONNECTIONS=1000 \
    MAX_REQUESTS=1000 \
    MAX_REQUESTS_JITTER=100 \
    TIMEOUT=120 \
    KEEPALIVE=5

# Create startup script
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
set -e

echo "🚀 Starting FortiGate Nextrade Production Server..."
echo "📍 Mode: ${APP_MODE}"
echo "🌐 Host: ${WEB_APP_HOST}:${WEB_APP_PORT}"
echo "💾 Data Dir: /app/data"
echo "📄 Logs Dir: /app/logs"

# Ensure directories exist and have correct permissions
mkdir -p /app/data /app/logs /app/temp
chown -R fortinet:fortinet /app/data /app/logs /app/temp

# Environment validation
if [ -z "$WEB_APP_PORT" ]; then
    export WEB_APP_PORT=7777
fi

# Start application with gunicorn for production
cd /app/src

# Production server with gunicorn
exec gunicorn \
    --bind ${WEB_APP_HOST}:${WEB_APP_PORT} \
    --workers ${WORKERS} \
    --worker-class ${WORKER_CLASS} \
    --worker-connections ${WORKER_CONNECTIONS} \
    --max-requests ${MAX_REQUESTS} \
    --max-requests-jitter ${MAX_REQUESTS_JITTER} \
    --timeout ${TIMEOUT} \
    --keepalive ${KEEPALIVE} \
    --user fortinet \
    --group fortinet \
    --access-logfile /app/logs/access.log \
    --error-logfile /app/logs/error.log \
    --log-level info \
    --capture-output \
    --enable-stdio-inheritance \
    --preload \
    --pythonpath /app/src \
    web_app:app
EOF

RUN chmod +x /app/start.sh

# =============================================================================
# Runtime Configuration
# =============================================================================

# Switch to non-root user
USER fortinet

# Working directory
WORKDIR /app

# Expose port (dynamically from environment)
EXPOSE ${WEB_APP_PORT}

# Volume mounts for data persistence
VOLUME ["/app/data", "/app/logs"]

# Default command
CMD ["/app/start.sh"]

# =============================================================================
# Build Information
# =============================================================================
RUN echo "Build Information:" > /app/build-info.txt && \
    echo "Build Date: ${BUILD_DATE}" >> /app/build-info.txt && \
    echo "Git Commit: ${GIT_COMMIT}" >> /app/build-info.txt && \
    echo "Git Branch: ${GIT_BRANCH}" >> /app/build-info.txt && \
    echo "Version: ${VERSION}" >> /app/build-info.txt && \
    echo "Registry: registry.jclee.me/fortinet:latest" >> /app/build-info.txt