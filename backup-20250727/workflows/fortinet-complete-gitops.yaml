name: Fortinet Complete GitOps CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [main, master]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

env:
  REGISTRY: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: jclee94/fortinet
  APP_NAME: fortinet
  NAMESPACE: fortinet
  NODEPORT: 30777

jobs:
  # 1Îã®Í≥Ñ: Îπ†Î•∏ Í≤ÄÏ¶ù
  quick-validation:
    runs-on: self-hosted
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest flake8 black
          
      - name: Quick validation
        run: |
          echo "‚úÖ Running quick validation..."
          cd src && python test_features.py
          
      - name: Check deployment eligibility
        id: check
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # 2Îã®Í≥Ñ: ÏôÑÏ†ÑÌïú ÎπåÎìú Î∞è Î∞∞Ìè¨
  build-and-deploy:
    runs-on: self-hosted
    needs: quick-validation
    if: needs.quick-validation.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Generate version info
        id: version
        run: |
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA=${COMMIT_SHA:0:8}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          CHART_VERSION="1.0.0-${TIMESTAMP}-${SHORT_SHA}"
          IMAGE_TAG="master-${SHORT_SHA}"
          
          echo "chart-version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Generated chart version: ${CHART_VERSION}"
          echo "Generated image tag: ${IMAGE_TAG}"
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.production
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.image-tag }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          
      - name: Update Helm chart
        run: |
          CHART_VERSION="${{ steps.version.outputs.chart-version }}"
          IMAGE_TAG="${{ steps.version.outputs.image-tag }}"
          
          echo "üì¶ Updating Helm chart..."
          echo "  Chart Version: ${CHART_VERSION}"
          echo "  Image Tag: ${IMAGE_TAG}"
          
          # Chart Î≤ÑÏ†ÑÍ≥º Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
          sed -i "s/^version:.*/version: ${CHART_VERSION}/" ./charts/${APP_NAME}/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${CHART_VERSION}\"/" ./charts/${APP_NAME}/Chart.yaml
          sed -i "s/tag:.*/tag: \"${IMAGE_TAG}\"/" ./charts/${APP_NAME}/values.yaml
          
      - name: Commit chart changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add charts/${APP_NAME}/Chart.yaml charts/${APP_NAME}/values.yaml
          
          if git diff --staged --quiet; then
            echo "üìù No chart changes to commit"
          else
            git commit -m "üöÄ Update chart to ${{ steps.version.outputs.chart-version }}

            üì¶ Chart Version: ${{ steps.version.outputs.chart-version }}
            üê≥ Image Tag: ${{ steps.version.outputs.image-tag }}
            
            Generated by GitHub Actions
            
            Co-Authored-By: GitHub Actions <actions@github.com>"
            git push
            echo "‚úÖ Chart changes committed and pushed"
          fi
          
      - name: Verify deployment
        run: |
          echo "üîç Waiting for ArgoCD sync..."
          sleep 90
          
          # Ìó¨Ïä§Ï≤¥ÌÅ¨
          HEALTH_URL="http://192.168.50.110:${NODEPORT}/api/health"
          echo "Testing: ${HEALTH_URL}"
          
          for i in {1..5}; do
            if curl -f --connect-timeout 10 "${HEALTH_URL}"; then
              echo "‚úÖ Deployment verification successful"
              exit 0
            else
              echo "‚è≥ Attempt ${i}/5 failed, waiting..."
              sleep 30
            fi
          done
          
          echo "‚ö† Health check failed but continuing..."
