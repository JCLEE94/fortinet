name: Fortinet GitOps CI/CD Pipeline

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [main, master]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'

env:
  REGISTRY: ${{ secrets.REGISTRY_URL }}
  IMAGE_NAME: ${{ vars.GITHUB_ORG }}/${{ vars.APP_NAME }}
  PYTHON_VERSION: '3.11'

jobs:
  # 1Îã®Í≥Ñ: ÏΩîÎìú ÌíàÏßà Î∞è Î≥¥Ïïà Í≤ÄÏÇ¨
  code-quality:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov bandit safety
          
      - name: Run linting
        run: |
          echo "üßπ Running code quality checks..."
          black --check src/ || echo "‚ö† Black formatting issues found"
          flake8 src/ --max-line-length=120 --ignore=E203,W503 || echo "‚ö† Flake8 issues found"
          
      - name: Security scan
        run: |
          echo "üîí Running security scans..."
          bandit -r src/ -f json -o bandit-report.json || echo "‚ö† Security issues found"
          safety check --json --output safety-report.json || echo "‚ö† Dependency vulnerabilities found"
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # 2Îã®Í≥Ñ: Îã®ÏúÑ ÌÖåÏä§Ìä∏ Î∞è ÌÜµÌï© ÌÖåÏä§Ìä∏
  test-suite:
    runs-on: self-hosted
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist
          
      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          cd src
          pytest ../tests/unit/ -v --tb=short --cov=. --cov-report=xml
          
      - name: Run integration tests
        run: |
          echo "üîó Running integration tests..."
          export APP_MODE=test
          export OFFLINE_MODE=true
          export DISABLE_SOCKETIO=true
          cd src
          pytest ../tests/integration/ -v --tb=short --maxfail=5
          
      - name: Run feature validation tests
        run: |
          echo "‚úÖ Running feature validation..."
          cd src
          python test_features.py
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            src/logs/

  # 3Îã®Í≥Ñ: Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
  build-and-push:
    runs-on: self-hosted
    needs: test-suite
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      chart-version: ${{ steps.version.outputs.chart-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
      - name: Generate version info
        id: version
        run: |
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA=${COMMIT_SHA:0:8}
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          CHART_VERSION="1.0.0-${TIMESTAMP}-${SHORT_SHA}"
          echo "chart-version=${CHART_VERSION}" >> $GITHUB_OUTPUT
          echo "Generated chart version: ${CHART_VERSION}"
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          
      - name: Test Docker image
        run: |
          echo "üê≥ Testing Docker image..."
          # Ïù¥ÎØ∏ÏßÄ Í∏∞Î≥∏ Í≤ÄÏ¶ù
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest python --version
          echo "‚úÖ Docker image validated"

  # 4Îã®Í≥Ñ: Helm Ï∞®Ìä∏ Ìå®ÌÇ§Ïßï Î∞è Î∞∞Ìè¨
  helm-deploy:
    runs-on: self-hosted
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.14.0'
          
      - name: Update Helm chart
        run: |
          CHART_VERSION="${{ needs.build-and-push.outputs.chart-version }}"
          IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | head -n1 | cut -d: -f2)
          
          echo "üì¶ Updating Helm chart..."
          echo "  Chart Version: ${CHART_VERSION}"
          echo "  Image Tag: ${IMAGE_TAG}"
          
          # Chart.yaml ÏóÖÎç∞Ïù¥Ìä∏
          sed -i "s/^version:.*/version: ${CHART_VERSION}/" ./charts/${{ vars.APP_NAME }}/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${CHART_VERSION}\"/" ./charts/${{ vars.APP_NAME }}/Chart.yaml
          
          # values.yaml ÏóÖÎç∞Ïù¥Ìä∏
          sed -i "s/tag:.*/tag: \"${IMAGE_TAG}\"/" ./charts/${{ vars.APP_NAME }}/values.yaml
          
      - name: Package and upload Helm chart
        run: |
          CHART_VERSION="${{ needs.build-and-push.outputs.chart-version }}"
          
          echo "üì¶ Packaging Helm chart..."
          helm package ./charts/${{ vars.APP_NAME }} --destination ./
          
          CHART_FILE="${{ vars.APP_NAME }}-${CHART_VERSION}.tgz"
          
          echo "‚¨ÜÔ∏è Uploading ${CHART_FILE} to ChartMuseum..."
          HTTP_CODE=$(curl -w "%{http_code}" -s -o /tmp/upload_response.txt \
            -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            --data-binary "@${CHART_FILE}" \
            ${{ secrets.CHARTMUSEUM_URL }}/api/charts)
          
          echo "HTTP Response Code: ${HTTP_CODE}"
          
          if [ "${HTTP_CODE}" = "201" ] || [ "${HTTP_CODE}" = "409" ]; then
            echo "‚úÖ Chart upload successful: ${CHART_VERSION}"
          else
            echo "‚ùå Chart upload failed (HTTP ${HTTP_CODE})"
            cat /tmp/upload_response.txt
            exit 1
          fi
          
          # ÏóÖÎ°úÎìú Í≤ÄÏ¶ù
          echo "üîç Verifying chart upload..."
          curl -s -u ${{ secrets.CHARTMUSEUM_USERNAME }}:${{ secrets.CHARTMUSEUM_PASSWORD }} \
            ${{ secrets.CHARTMUSEUM_URL }}/api/charts/${{ vars.APP_NAME }} | \
            grep -q "${CHART_VERSION}" && echo "‚úÖ Chart verification successful" || echo "‚ö† Chart verification failed"

  # 5Îã®Í≥Ñ: Î∞∞Ìè¨ Í≤ÄÏ¶ù
  deployment-verification:
    runs-on: self-hosted
    needs: helm-deploy
    steps:
      - name: Wait for ArgoCD sync
        run: |
          echo "‚è≥ Waiting for ArgoCD to sync the application..."
          sleep 30
          
      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Í∏∞Î≥∏ Ìó¨Ïä§Ï≤¥ÌÅ¨
          HEALTH_URL="http://192.168.50.110:${{ vars.NODEPORT }}/api/health"
          echo "Testing health endpoint: ${HEALTH_URL}"
          
          # ÏµúÎåÄ 10Î≤à Ïû¨ÏãúÎèÑ (Ï¥ù 5Î∂Ñ)
          for i in {1..10}; do
            if curl -f --connect-timeout 10 --max-time 30 "${HEALTH_URL}"; then
              echo "‚úÖ Health check successful"
              break
            else
              echo "‚è≥ Health check failed, attempt ${i}/10"
              if [ ${i} -eq 10 ]; then
                echo "‚ùå Health check failed after 10 attempts"
                exit 1
              fi
              sleep 30
            fi
          done
          
          # Ï∂îÍ∞Ä API ÏóîÎìúÌè¨Ïù∏Ìä∏ Í≤ÄÏ¶ù
          echo "üß™ Testing additional endpoints..."
          curl -f "${HEALTH_URL%/*}/system-info" || echo "‚ö† System info endpoint issues"
          
          echo "‚úÖ Deployment verification completed"

