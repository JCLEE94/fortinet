name: üéØ Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      image_tag:
        description: 'Docker image tag (leave empty for latest)'
        required: false
        type: string
      skip_build:
        description: 'Skip build and use existing image'
        required: false
        default: false
        type: boolean
      force_sync:
        description: 'Force ArgoCD sync even if already synced'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.jclee.me
  IMAGE_NAME: fortinet

jobs:
  deploy:
    name: üöÄ Manual Deploy to ${{ github.event.inputs.environment }}
    runs-on: self-hosted
    timeout-minutes: 20
    
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ github.event.inputs.environment == 'production' && 'https://fortinet.jclee.me' || format('https://fortinet-{0}.jclee.me', github.event.inputs.environment) }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine image tag
      id: image
      run: |
        if [ -n "${{ github.event.inputs.image_tag }}" ]; then
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
        else
          # Get latest tag from registry
          IMAGE_TAG="latest"
        fi
        
        echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "üì¶ Using image tag: ${IMAGE_TAG}"

    - name: Build new image (if not skipping)
      if: github.event.inputs.skip_build != 'true'
      run: |
        echo "üîß Building new Docker image..."
        
        # Set up Docker Buildx
        docker buildx create --use --name multiarch --driver docker-container || true
        
        # Login to registry
        docker login ${{ env.REGISTRY }} -u admin -p bingogo1
        
        # Generate version
        VERSION="manual-$(date +%Y%m%d%H%M)-$(git rev-parse --short HEAD)"
        
        # Build and push
        docker buildx build \
          --platform linux/amd64 \
          --file ./Dockerfile.production \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION} \
          --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.environment }}-latest \
          --push \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --build-arg GIT_BRANCH=${{ github.ref_name }} \
          --build-arg VERSION=${VERSION} \
          --build-arg ENVIRONMENT=${{ github.event.inputs.environment }} \
          .
        
        echo "tag=${VERSION}" >> $GITHUB_OUTPUT
        echo "üì¶ Built and pushed: ${VERSION}"

    - name: Update Kubernetes manifests
      run: |
        echo "üîÑ Updating Kubernetes manifests..."
        
        # Update image in deployment
        sed -i "s|image: .*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }}|" k8s/manifests/deployment.yaml
        
        # Add deployment annotations
        TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        sed -i "/annotations:/a\\        deployment.kubernetes.io/restart: \"${TIMESTAMP}\"" k8s/manifests/deployment.yaml
        sed -i "/annotations:/a\\        deployment.kubernetes.io/environment: \"${{ github.event.inputs.environment }}\"" k8s/manifests/deployment.yaml
        sed -i "/annotations:/a\\        deployment.kubernetes.io/manual: \"true\"" k8s/manifests/deployment.yaml

    - name: Commit changes
      run: |
        echo "üìù Committing changes..."
        
        git config --global user.name "Manual Deploy Bot"
        git config --global user.email "manual-deploy@fortinet.local"
        
        git add k8s/manifests/deployment.yaml
        
        if ! git diff --staged --quiet; then
          git commit -m "üéØ manual-deploy(${{ github.event.inputs.environment }}): ${{ steps.image.outputs.tag }}

- Environment: ${{ github.event.inputs.environment }}
- Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }}
- Trigger: Manual deployment
- Actor: ${{ github.actor }}
- Commit: ${{ github.sha }}

üéØ Manual deployment by ${{ github.actor }}"
          
          git push origin ${{ github.ref_name }}
        fi

    - name: ArgoCD Manual Sync
      run: |
        echo "üîÑ Performing manual ArgoCD sync..."
        
        # Install ArgoCD CLI if not available
        if ! command -v argocd &> /dev/null; then
          curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
        fi
        
        # Login to ArgoCD
        argocd login argo.jclee.me \
          --username admin \
          --password bingogo1 \
          --insecure \
          --grpc-web
        
        # Determine application name
        APP_NAME="fortinet"
        if [ "${{ github.event.inputs.environment }}" != "production" ]; then
          APP_NAME="fortinet-${{ github.event.inputs.environment }}"
        fi
        
        echo "üéØ Syncing application: ${APP_NAME}"
        
        # Force refresh and sync
        argocd app get ${APP_NAME} --refresh
        
        SYNC_ARGS="--prune --timeout 300"
        if [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
          SYNC_ARGS="${SYNC_ARGS} --force"
        fi
        
        argocd app sync ${APP_NAME} ${SYNC_ARGS}
        
        # Wait for sync completion
        argocd app wait ${APP_NAME} --timeout 300

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Wait for pods to be ready
        sleep 60
        
        # Health check URLs
        case "${{ github.event.inputs.environment }}" in
          "production")
            HEALTH_URL="https://fortinet.jclee.me/api/health"
            FALLBACK_URL="http://192.168.50.110:30777/api/health"
            ;;
          "staging")
            HEALTH_URL="https://fortinet-staging.jclee.me/api/health"
            FALLBACK_URL="http://192.168.50.110:30779/api/health"
            ;;
          "development")
            HEALTH_URL="https://fortinet-development.jclee.me/api/health"
            FALLBACK_URL="http://192.168.50.110:30778/api/health"
            ;;
        esac
        
        echo "üè• Health check: ${HEALTH_URL}"
        
        # Retry health check with backoff
        for i in {1..5}; do
          if curl -s --max-time 10 "${HEALTH_URL}" | grep -q "healthy"; then
            echo "‚úÖ Health check passed (attempt ${i})"
            break
          elif curl -s --max-time 10 "${FALLBACK_URL}" | grep -q "healthy"; then
            echo "‚úÖ Fallback health check passed (attempt ${i})"
            break
          else
            echo "‚è≥ Health check failed (attempt ${i}/5), retrying in 30s..."
            if [ ${i} -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              exit 1
            fi
            sleep 30
          fi
        done

    - name: Deployment summary
      run: |
        echo "=== üéØ MANUAL DEPLOYMENT SUMMARY ==="
        echo "Timestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Image Tag: ${{ steps.image.outputs.tag }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Build Skipped: ${{ github.event.inputs.skip_build }}"
        echo "Force Sync: ${{ github.event.inputs.force_sync }}"
        echo ""
        echo "‚úÖ MANUAL DEPLOYMENT COMPLETED"
        echo ""
        echo "üîó QUICK ACCESS:"
        case "${{ github.event.inputs.environment }}" in
          "production")
            echo "  üåê Application: https://fortinet.jclee.me"
            echo "  üîó NodePort: http://192.168.50.110:30777"
            ;;
          "staging")
            echo "  üåê Application: https://fortinet-staging.jclee.me"
            echo "  üîó NodePort: http://192.168.50.110:30779"
            ;;
          "development")
            echo "  üåê Application: https://fortinet-development.jclee.me"
            echo "  üîó NodePort: http://192.168.50.110:30778"
            ;;
        esac
        echo "  üìà ArgoCD: https://argo.jclee.me/applications"
        echo "  üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image.outputs.tag }}"
        echo "===================================="