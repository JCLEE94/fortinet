version: '3.8'

# 보안 강화된 MSA 환경 설정
services:
  # API Gateway (Kong) - 보안 강화
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa
    # 보안 컨텍스트 강화
    security_opt:
      - no-new-privileges:true
    read_only: false  # PostgreSQL은 쓰기 필요
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    user: "999:999"  # postgres user
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    restart: unless-stopped

  kong-migrations:
    image: kong/kong-gateway:3.4.0
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PG_DATABASE: kong
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"
    cap_drop:
      - ALL

  kong:
    image: kong/kong-gateway:3.4.0
    depends_on:
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
      # 보안 강화 설정
      KONG_HEADERS: "off"
      KONG_ANONYMOUS_REPORTS: "off"
    ports:
      - "8000:8000"   # Proxy port
      - "8001:8001"   # Admin API port
      - "8002:8002"   # Admin GUI port
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped

  # Service Discovery (Consul) - 보안 강화
  consul:
    image: consul:1.16
    command: >
      agent -server -bootstrap -ui -node=server-1 -bind=0.0.0.0 -client=0.0.0.0 
      -datacenter=dc1 -encrypt=${CONSUL_ENCRYPT_KEY:-$(openssl rand -base64 32)}
    ports:
      - "8500:8500"
    environment:
      CONSUL_BIND_INTERFACE: eth0
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "100:1000"  # consul user
    cap_drop:
      - ALL
    restart: unless-stopped

  # Message Queue (RabbitMQ) - 보안 강화
  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-fortinet_admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: fortinet
      RABBITMQ_ERLANG_COOKIE: ${RABBITMQ_ERLANG_COOKIE}
      # 보안 설정
      RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 0.6
      RABBITMQ_DISK_FREE_LIMIT: 1GB
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "999:999"  # rabbitmq user
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    restart: unless-stopped

  # Redis (Shared Cache) - 보안 강화
  redis:
    image: redis:7.2-alpine
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-$(openssl rand -base64 32)}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "999:999"  # redis user
    cap_drop:
      - ALL
    restart: unless-stopped

  # FortiManager Service - 보안 강화
  fortimanager-service:
    build:
      context: .
      dockerfile: services/fortimanager/Dockerfile
    environment:
      SERVICE_NAME: fortimanager-service
      SERVICE_PORT: 8082
      DATABASE_URL: postgresql://fortimanager:${FORTIMANAGER_DB_PASSWORD}@fortimanager-db:5432/fortimanager
      CONSUL_URL: http://consul:8500
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      # 보안 설정
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      INTER_SERVICE_AUTH_KEY: ${INTER_SERVICE_AUTH_KEY}
    ports:
      - "8082:8082"
    depends_on:
      - fortimanager-db
      - consul
      - rabbitmq
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped

  fortimanager-db:
    image: postgres:15
    environment:
      POSTGRES_DB: fortimanager
      POSTGRES_USER: fortimanager
      POSTGRES_PASSWORD: ${FORTIMANAGER_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - fortimanager_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    restart: unless-stopped

  # ITSM Service - 보안 강화
  itsm-service:
    build:
      context: .
      dockerfile: services/itsm/Dockerfile
    environment:
      SERVICE_NAME: itsm-service
      SERVICE_PORT: 8083
      DATABASE_URL: postgresql://itsm:${ITSM_DB_PASSWORD}@itsm-db:5432/itsm
      CONSUL_URL: http://consul:8500
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      INTER_SERVICE_AUTH_KEY: ${INTER_SERVICE_AUTH_KEY}
    ports:
      - "8083:8083"
    depends_on:
      - itsm-db
      - consul
      - rabbitmq
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped

  itsm-db:
    image: postgres:15
    environment:
      POSTGRES_DB: itsm
      POSTGRES_USER: itsm
      POSTGRES_PASSWORD: ${ITSM_DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - itsm_data:/var/lib/postgresql/data
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    restart: unless-stopped

  # Security Service - 보안 강화
  security-service:
    build:
      context: .
      dockerfile: services/security/Dockerfile
    environment:
      SERVICE_NAME: security-service
      SERVICE_PORT: 8085
      MONGODB_URL: mongodb://security:${MONGODB_ROOT_PASSWORD}@mongodb:27017/security
      CONSUL_URL: http://consul:8500
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      INTER_SERVICE_AUTH_KEY: ${INTER_SERVICE_AUTH_KEY}
    ports:
      - "8085:8085"
    depends_on:
      - mongodb
      - consul
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: security
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: security
    volumes:
      - mongodb_data:/data/db
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    restart: unless-stopped

  # Monitoring - 보안 강화
  influxdb:
    image: influxdb:2.7
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: fortinet
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: fortinet
      DOCKER_INFLUXDB_INIT_BUCKET: monitoring
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    cap_drop:
      - ALL
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_SECURITY_COOKIE_SECURE: true
      GF_SECURITY_COOKIE_SAMESITE: strict
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - fortinet-msa
    security_opt:
      - no-new-privileges:true
    user: "472:472"  # grafana user
    cap_drop:
      - ALL
    restart: unless-stopped

# 네트워크 보안 강화
networks:
  fortinet-msa:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: fortinet-secure
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# 볼륨 설정
volumes:
  kong_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  fortimanager_data:
    driver: local
  itsm_data:
    driver: local
  influxdb_data:
    driver: local
  mongodb_data:
    driver: local
  analysis_data:
    driver: local
  etcd_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local